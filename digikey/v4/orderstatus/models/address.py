# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'city': 'str',
        'state': 'str',
        'county': 'str',
        'zip_code': 'str',
        'iso_code': 'str',
        'phone': 'str',
        'invoice_id': 'int'
    }

    attribute_map = {
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'company_name': 'CompanyName',
        'address_line1': 'AddressLine1',
        'address_line2': 'AddressLine2',
        'address_line3': 'AddressLine3',
        'city': 'City',
        'state': 'State',
        'county': 'County',
        'zip_code': 'ZipCode',
        'iso_code': 'IsoCode',
        'phone': 'Phone',
        'invoice_id': 'InvoiceId'
    }

    def __init__(self, first_name=None, last_name=None, company_name=None, address_line1=None, address_line2=None, address_line3=None, city=None, state=None, county=None, zip_code=None, iso_code=None, phone=None, invoice_id=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._city = None
        self._state = None
        self._county = None
        self._zip_code = None
        self._iso_code = None
        self._phone = None
        self._invoice_id = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if county is not None:
            self.county = county
        if zip_code is not None:
            self.zip_code = zip_code
        if iso_code is not None:
            self.iso_code = iso_code
        if phone is not None:
            self.phone = phone
        if invoice_id is not None:
            self.invoice_id = invoice_id

    @property
    def first_name(self):
        """Gets the first_name of this Address.  # noqa: E501

        First name on address  # noqa: E501

        :return: The first_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Address.

        First name on address  # noqa: E501

        :param first_name: The first_name of this Address.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Address.  # noqa: E501

        Last name on address  # noqa: E501

        :return: The last_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Address.

        Last name on address  # noqa: E501

        :param last_name: The last_name of this Address.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this Address.  # noqa: E501

        Company name on address  # noqa: E501

        :return: The company_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Address.

        Company name on address  # noqa: E501

        :param company_name: The company_name of this Address.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501

        First address line  # noqa: E501

        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        First address line  # noqa: E501

        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501

        Second address line  # noqa: E501

        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        Second address line  # noqa: E501

        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.  # noqa: E501

        Third address line  # noqa: E501

        :return: The address_line3 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.

        Third address line  # noqa: E501

        :param address_line3: The address_line3 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        City on address  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City on address  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this Address.  # noqa: E501

        State code on address  # noqa: E501

        :return: The state of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        State code on address  # noqa: E501

        :param state: The state of this Address.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def county(self):
        """Gets the county of this Address.  # noqa: E501

        County on address  # noqa: E501

        :return: The county of this Address.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        County on address  # noqa: E501

        :param county: The county of this Address.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.  # noqa: E501

        Zip code on address  # noqa: E501

        :return: The zip_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.

        Zip code on address  # noqa: E501

        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def iso_code(self):
        """Gets the iso_code of this Address.  # noqa: E501

        Country on address  # noqa: E501

        :return: The iso_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this Address.

        Country on address  # noqa: E501

        :param iso_code: The iso_code of this Address.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def phone(self):
        """Gets the phone of this Address.  # noqa: E501

        Phone number on address  # noqa: E501

        :return: The phone of this Address.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Address.

        Phone number on address  # noqa: E501

        :param phone: The phone of this Address.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Address.  # noqa: E501

        Invoice ID of order  # noqa: E501

        :return: The invoice_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Address.

        Invoice ID of order  # noqa: E501

        :param invoice_id: The invoice_id of this Address.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
