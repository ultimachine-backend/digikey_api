# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SalesOrderStatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_status': 'str',
        'short_description': 'str',
        'long_description': 'str'
    }

    attribute_map = {
        'sales_order_status': 'SalesOrderStatus',
        'short_description': 'ShortDescription',
        'long_description': 'LongDescription'
    }

    def __init__(self, sales_order_status=None, short_description=None, long_description=None):  # noqa: E501
        """SalesOrderStatusInfo - a model defined in Swagger"""  # noqa: E501

        self._sales_order_status = None
        self._short_description = None
        self._long_description = None
        self.discriminator = None

        if sales_order_status is not None:
            self.sales_order_status = sales_order_status
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description

    @property
    def sales_order_status(self):
        """Gets the sales_order_status of this SalesOrderStatusInfo.  # noqa: E501

        Status of order  # noqa: E501

        :return: The sales_order_status of this SalesOrderStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_status

    @sales_order_status.setter
    def sales_order_status(self, sales_order_status):
        """Sets the sales_order_status of this SalesOrderStatusInfo.

        Status of order  # noqa: E501

        :param sales_order_status: The sales_order_status of this SalesOrderStatusInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Received", "Processing", "Processing3rdParty", "ProcessingPartialShipment", "ProcessingAwaitingBackorders", "ProcessingShipBackorder", "ProcessingScheduledShipmentMultipleRelease", "ProcessingScheduledShipmentSingleRelease", "ProcessingScheduledShipmentMsc", "Shipped", "Delivered", "GenericDelay", "Canceled", "Proforma", "ActionRequiredWireTransfer"]  # noqa: E501
        if sales_order_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sales_order_status` ({0}), must be one of {1}"  # noqa: E501
                .format(sales_order_status, allowed_values)
            )

        self._sales_order_status = sales_order_status

    @property
    def short_description(self):
        """Gets the short_description of this SalesOrderStatusInfo.  # noqa: E501

        Short description of order status  # noqa: E501

        :return: The short_description of this SalesOrderStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this SalesOrderStatusInfo.

        Short description of order status  # noqa: E501

        :param short_description: The short_description of this SalesOrderStatusInfo.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this SalesOrderStatusInfo.  # noqa: E501

        Longer description of order status  # noqa: E501

        :return: The long_description of this SalesOrderStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this SalesOrderStatusInfo.

        Longer description of order status  # noqa: E501

        :param long_description: The long_description of this SalesOrderStatusInfo.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderStatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderStatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
