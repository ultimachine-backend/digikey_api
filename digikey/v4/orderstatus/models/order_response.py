# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_orders': 'int',
        'orders': 'list[Order]'
    }

    attribute_map = {
        'total_orders': 'TotalOrders',
        'orders': 'Orders'
    }

    def __init__(self, total_orders=None, orders=None):  # noqa: E501
        """OrderResponse - a model defined in Swagger"""  # noqa: E501

        self._total_orders = None
        self._orders = None
        self.discriminator = None

        if total_orders is not None:
            self.total_orders = total_orders
        if orders is not None:
            self.orders = orders

    @property
    def total_orders(self):
        """Gets the total_orders of this OrderResponse.  # noqa: E501


        :return: The total_orders of this OrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_orders

    @total_orders.setter
    def total_orders(self, total_orders):
        """Sets the total_orders of this OrderResponse.


        :param total_orders: The total_orders of this OrderResponse.  # noqa: E501
        :type: int
        """

        self._total_orders = total_orders

    @property
    def orders(self):
        """Gets the orders of this OrderResponse.  # noqa: E501


        :return: The orders of this OrderResponse.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this OrderResponse.


        :param orders: The orders of this OrderResponse.  # noqa: E501
        :type: list[Order]
        """

        self._orders = orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
