# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'int',
        'customer_id': 'int',
        'date_entered': 'datetime',
        'currency': 'str',
        'po_number': 'str',
        'entire_order_status': 'OrderStatusInfo',
        'sales_orders': 'list[SalesOrder]'
    }

    attribute_map = {
        'order_number': 'OrderNumber',
        'customer_id': 'CustomerId',
        'date_entered': 'DateEntered',
        'currency': 'Currency',
        'po_number': 'PONumber',
        'entire_order_status': 'EntireOrderStatus',
        'sales_orders': 'SalesOrders'
    }

    def __init__(self, order_number=None, customer_id=None, date_entered=None, currency=None, po_number=None, entire_order_status=None, sales_orders=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._order_number = None
        self._customer_id = None
        self._date_entered = None
        self._currency = None
        self._po_number = None
        self._entire_order_status = None
        self._sales_orders = None
        self.discriminator = None

        if order_number is not None:
            self.order_number = order_number
        if customer_id is not None:
            self.customer_id = customer_id
        if date_entered is not None:
            self.date_entered = date_entered
        if currency is not None:
            self.currency = currency
        if po_number is not None:
            self.po_number = po_number
        if entire_order_status is not None:
            self.entire_order_status = entire_order_status
        if sales_orders is not None:
            self.sales_orders = sales_orders

    @property
    def order_number(self):
        """Gets the order_number of this Order.  # noqa: E501

        OrderNumber of the order  # noqa: E501

        :return: The order_number of this Order.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.

        OrderNumber of the order  # noqa: E501

        :param order_number: The order_number of this Order.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    @property
    def customer_id(self):
        """Gets the customer_id of this Order.  # noqa: E501

        CustomerID of the order  # noqa: E501

        :return: The customer_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Order.

        CustomerID of the order  # noqa: E501

        :param customer_id: The customer_id of this Order.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def date_entered(self):
        """Gets the date_entered of this Order.  # noqa: E501

        Date the order was entered  # noqa: E501

        :return: The date_entered of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._date_entered

    @date_entered.setter
    def date_entered(self, date_entered):
        """Sets the date_entered of this Order.

        Date the order was entered  # noqa: E501

        :param date_entered: The date_entered of this Order.  # noqa: E501
        :type: datetime
        """

        self._date_entered = date_entered

    @property
    def currency(self):
        """Gets the currency of this Order.  # noqa: E501

        Currency used to pay for order  # noqa: E501

        :return: The currency of this Order.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.

        Currency used to pay for order  # noqa: E501

        :param currency: The currency of this Order.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def po_number(self):
        """Gets the po_number of this Order.  # noqa: E501

        Purchase order number of the order  # noqa: E501

        :return: The po_number of this Order.  # noqa: E501
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this Order.

        Purchase order number of the order  # noqa: E501

        :param po_number: The po_number of this Order.  # noqa: E501
        :type: str
        """

        self._po_number = po_number

    @property
    def entire_order_status(self):
        """Gets the entire_order_status of this Order.  # noqa: E501


        :return: The entire_order_status of this Order.  # noqa: E501
        :rtype: OrderStatusInfo
        """
        return self._entire_order_status

    @entire_order_status.setter
    def entire_order_status(self, entire_order_status):
        """Sets the entire_order_status of this Order.


        :param entire_order_status: The entire_order_status of this Order.  # noqa: E501
        :type: OrderStatusInfo
        """

        self._entire_order_status = entire_order_status

    @property
    def sales_orders(self):
        """Gets the sales_orders of this Order.  # noqa: E501

        List of the salesOrders  # noqa: E501

        :return: The sales_orders of this Order.  # noqa: E501
        :rtype: list[SalesOrder]
        """
        return self._sales_orders

    @sales_orders.setter
    def sales_orders(self, sales_orders):
        """Sets the sales_orders of this Order.

        List of the salesOrders  # noqa: E501

        :param sales_orders: The sales_orders of this Order.  # noqa: E501
        :type: list[SalesOrder]
        """

        self._sales_orders = sales_orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
