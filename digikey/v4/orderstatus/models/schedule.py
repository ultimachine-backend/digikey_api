# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity_scheduled': 'int',
        'scheduled_date': 'datetime',
        'digi_key_release_date': 'datetime'
    }

    attribute_map = {
        'quantity_scheduled': 'QuantityScheduled',
        'scheduled_date': 'ScheduledDate',
        'digi_key_release_date': 'DigiKeyReleaseDate'
    }

    def __init__(self, quantity_scheduled=None, scheduled_date=None, digi_key_release_date=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501

        self._quantity_scheduled = None
        self._scheduled_date = None
        self._digi_key_release_date = None
        self.discriminator = None

        if quantity_scheduled is not None:
            self.quantity_scheduled = quantity_scheduled
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if digi_key_release_date is not None:
            self.digi_key_release_date = digi_key_release_date

    @property
    def quantity_scheduled(self):
        """Gets the quantity_scheduled of this Schedule.  # noqa: E501

        Quantity scheduled to be shipped  # noqa: E501

        :return: The quantity_scheduled of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._quantity_scheduled

    @quantity_scheduled.setter
    def quantity_scheduled(self, quantity_scheduled):
        """Sets the quantity_scheduled of this Schedule.

        Quantity scheduled to be shipped  # noqa: E501

        :param quantity_scheduled: The quantity_scheduled of this Schedule.  # noqa: E501
        :type: int
        """

        self._quantity_scheduled = quantity_scheduled

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Schedule.  # noqa: E501

        Date the shipment is scheduled to be delivered to the customer  # noqa: E501

        :return: The scheduled_date of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Schedule.

        Date the shipment is scheduled to be delivered to the customer  # noqa: E501

        :param scheduled_date: The scheduled_date of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def digi_key_release_date(self):
        """Gets the digi_key_release_date of this Schedule.  # noqa: E501

        Date the shipment is scheduled to depart DigiKey’s facility  # noqa: E501

        :return: The digi_key_release_date of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._digi_key_release_date

    @digi_key_release_date.setter
    def digi_key_release_date(self, digi_key_release_date):
        """Sets the digi_key_release_date of this Schedule.

        Date the shipment is scheduled to depart DigiKey’s facility  # noqa: E501

        :param digi_key_release_date: The digi_key_release_date of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._digi_key_release_date = digi_key_release_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
