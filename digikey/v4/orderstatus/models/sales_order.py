# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SalesOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'contact': 'Contact',
        'sales_order_id': 'int',
        'status': 'SalesOrderStatusInfo',
        'purchase_order': 'str',
        'total_price': 'float',
        'date_entered': 'datetime',
        'order_number': 'int',
        'ship_method': 'str',
        'currency': 'str',
        'shipping_address': 'Address',
        'line_items': 'list[LineItem]'
    }

    attribute_map = {
        'customer_id': 'CustomerId',
        'contact': 'Contact',
        'sales_order_id': 'SalesOrderId',
        'status': 'Status',
        'purchase_order': 'PurchaseOrder',
        'total_price': 'TotalPrice',
        'date_entered': 'DateEntered',
        'order_number': 'OrderNumber',
        'ship_method': 'ShipMethod',
        'currency': 'Currency',
        'shipping_address': 'ShippingAddress',
        'line_items': 'LineItems'
    }

    def __init__(self, customer_id=None, contact=None, sales_order_id=None, status=None, purchase_order=None, total_price=None, date_entered=None, order_number=None, ship_method=None, currency=None, shipping_address=None, line_items=None):  # noqa: E501
        """SalesOrder - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._contact = None
        self._sales_order_id = None
        self._status = None
        self._purchase_order = None
        self._total_price = None
        self._date_entered = None
        self._order_number = None
        self._ship_method = None
        self._currency = None
        self._shipping_address = None
        self._line_items = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if contact is not None:
            self.contact = contact
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if status is not None:
            self.status = status
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if total_price is not None:
            self.total_price = total_price
        if date_entered is not None:
            self.date_entered = date_entered
        if order_number is not None:
            self.order_number = order_number
        if ship_method is not None:
            self.ship_method = ship_method
        if currency is not None:
            self.currency = currency
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if line_items is not None:
            self.line_items = line_items

    @property
    def customer_id(self):
        """Gets the customer_id of this SalesOrder.  # noqa: E501

        Customer ID for the sales order  # noqa: E501

        :return: The customer_id of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SalesOrder.

        Customer ID for the sales order  # noqa: E501

        :param customer_id: The customer_id of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def contact(self):
        """Gets the contact of this SalesOrder.  # noqa: E501


        :return: The contact of this SalesOrder.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SalesOrder.


        :param contact: The contact of this SalesOrder.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this SalesOrder.  # noqa: E501

        Sales order ID for the sales order  # noqa: E501

        :return: The sales_order_id of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this SalesOrder.

        Sales order ID for the sales order  # noqa: E501

        :param sales_order_id: The sales_order_id of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def status(self):
        """Gets the status of this SalesOrder.  # noqa: E501


        :return: The status of this SalesOrder.  # noqa: E501
        :rtype: SalesOrderStatusInfo
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesOrder.


        :param status: The status of this SalesOrder.  # noqa: E501
        :type: SalesOrderStatusInfo
        """

        self._status = status

    @property
    def purchase_order(self):
        """Gets the purchase_order of this SalesOrder.  # noqa: E501

        Purchase order number of the sales order  # noqa: E501

        :return: The purchase_order of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this SalesOrder.

        Purchase order number of the sales order  # noqa: E501

        :param purchase_order: The purchase_order of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def total_price(self):
        """Gets the total_price of this SalesOrder.  # noqa: E501

        Total price of all details, Shipping Charges, Sales Tax, Tariffs, GST, HST  # noqa: E501

        :return: The total_price of this SalesOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this SalesOrder.

        Total price of all details, Shipping Charges, Sales Tax, Tariffs, GST, HST  # noqa: E501

        :param total_price: The total_price of this SalesOrder.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def date_entered(self):
        """Gets the date_entered of this SalesOrder.  # noqa: E501

        Date the sales order was entered  # noqa: E501

        :return: The date_entered of this SalesOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._date_entered

    @date_entered.setter
    def date_entered(self, date_entered):
        """Sets the date_entered of this SalesOrder.

        Date the sales order was entered  # noqa: E501

        :param date_entered: The date_entered of this SalesOrder.  # noqa: E501
        :type: datetime
        """

        self._date_entered = date_entered

    @property
    def order_number(self):
        """Gets the order_number of this SalesOrder.  # noqa: E501

        Order number of the sales order  # noqa: E501

        :return: The order_number of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this SalesOrder.

        Order number of the sales order  # noqa: E501

        :param order_number: The order_number of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    @property
    def ship_method(self):
        """Gets the ship_method of this SalesOrder.  # noqa: E501

        Method used to ship items in sales order  # noqa: E501

        :return: The ship_method of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._ship_method

    @ship_method.setter
    def ship_method(self, ship_method):
        """Sets the ship_method of this SalesOrder.

        Method used to ship items in sales order  # noqa: E501

        :param ship_method: The ship_method of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._ship_method = ship_method

    @property
    def currency(self):
        """Gets the currency of this SalesOrder.  # noqa: E501

        Currency used to place sales order  # noqa: E501

        :return: The currency of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SalesOrder.

        Currency used to place sales order  # noqa: E501

        :param currency: The currency of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def shipping_address(self):
        """Gets the shipping_address of this SalesOrder.  # noqa: E501


        :return: The shipping_address of this SalesOrder.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this SalesOrder.


        :param shipping_address: The shipping_address of this SalesOrder.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def line_items(self):
        """Gets the line_items of this SalesOrder.  # noqa: E501

        List of line items for a sales order  # noqa: E501

        :return: The line_items of this SalesOrder.  # noqa: E501
        :rtype: list[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this SalesOrder.

        List of line items for a sales order  # noqa: E501

        :param line_items: The line_items of this SalesOrder.  # noqa: E501
        :type: list[LineItem]
        """

        self._line_items = line_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
