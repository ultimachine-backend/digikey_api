# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_id': 'int',
        'detail_id': 'int',
        'total_price': 'float',
        'purchase_order': 'str',
        'customer_reference': 'str',
        'country_of_origin': 'str',
        'digi_key_product_number': 'str',
        'manufacturer_product_number': 'str',
        'description': 'str',
        'pack_type': 'str',
        'quantity_initial_requested': 'int',
        'quantity_ordered': 'int',
        'quantity_shipped': 'int',
        'quantity_reserved': 'int',
        'quantity_back_order': 'int',
        'unit_price': 'float',
        'po_line_item_number': 'str',
        'item_shipments': 'list[ItemShipInfo]',
        'schedules': 'list[Schedule]'
    }

    attribute_map = {
        'sales_order_id': 'SalesOrderId',
        'detail_id': 'DetailId',
        'total_price': 'TotalPrice',
        'purchase_order': 'PurchaseOrder',
        'customer_reference': 'CustomerReference',
        'country_of_origin': 'CountryOfOrigin',
        'digi_key_product_number': 'DigiKeyProductNumber',
        'manufacturer_product_number': 'ManufacturerProductNumber',
        'description': 'Description',
        'pack_type': 'PackType',
        'quantity_initial_requested': 'QuantityInitialRequested',
        'quantity_ordered': 'QuantityOrdered',
        'quantity_shipped': 'QuantityShipped',
        'quantity_reserved': 'QuantityReserved',
        'quantity_back_order': 'QuantityBackOrder',
        'unit_price': 'UnitPrice',
        'po_line_item_number': 'PoLineItemNumber',
        'item_shipments': 'ItemShipments',
        'schedules': 'Schedules'
    }

    def __init__(self, sales_order_id=None, detail_id=None, total_price=None, purchase_order=None, customer_reference=None, country_of_origin=None, digi_key_product_number=None, manufacturer_product_number=None, description=None, pack_type=None, quantity_initial_requested=None, quantity_ordered=None, quantity_shipped=None, quantity_reserved=None, quantity_back_order=None, unit_price=None, po_line_item_number=None, item_shipments=None, schedules=None):  # noqa: E501
        """LineItem - a model defined in Swagger"""  # noqa: E501

        self._sales_order_id = None
        self._detail_id = None
        self._total_price = None
        self._purchase_order = None
        self._customer_reference = None
        self._country_of_origin = None
        self._digi_key_product_number = None
        self._manufacturer_product_number = None
        self._description = None
        self._pack_type = None
        self._quantity_initial_requested = None
        self._quantity_ordered = None
        self._quantity_shipped = None
        self._quantity_reserved = None
        self._quantity_back_order = None
        self._unit_price = None
        self._po_line_item_number = None
        self._item_shipments = None
        self._schedules = None
        self.discriminator = None

        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if detail_id is not None:
            self.detail_id = detail_id
        if total_price is not None:
            self.total_price = total_price
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if digi_key_product_number is not None:
            self.digi_key_product_number = digi_key_product_number
        if manufacturer_product_number is not None:
            self.manufacturer_product_number = manufacturer_product_number
        if description is not None:
            self.description = description
        if pack_type is not None:
            self.pack_type = pack_type
        if quantity_initial_requested is not None:
            self.quantity_initial_requested = quantity_initial_requested
        if quantity_ordered is not None:
            self.quantity_ordered = quantity_ordered
        if quantity_shipped is not None:
            self.quantity_shipped = quantity_shipped
        if quantity_reserved is not None:
            self.quantity_reserved = quantity_reserved
        if quantity_back_order is not None:
            self.quantity_back_order = quantity_back_order
        if unit_price is not None:
            self.unit_price = unit_price
        if po_line_item_number is not None:
            self.po_line_item_number = po_line_item_number
        if item_shipments is not None:
            self.item_shipments = item_shipments
        if schedules is not None:
            self.schedules = schedules

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this LineItem.  # noqa: E501

        Sales order ID for given line item  # noqa: E501

        :return: The sales_order_id of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this LineItem.

        Sales order ID for given line item  # noqa: E501

        :param sales_order_id: The sales_order_id of this LineItem.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def detail_id(self):
        """Gets the detail_id of this LineItem.  # noqa: E501

        DK detail ID for given line item  # noqa: E501

        :return: The detail_id of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._detail_id

    @detail_id.setter
    def detail_id(self, detail_id):
        """Sets the detail_id of this LineItem.

        DK detail ID for given line item  # noqa: E501

        :param detail_id: The detail_id of this LineItem.  # noqa: E501
        :type: int
        """

        self._detail_id = detail_id

    @property
    def total_price(self):
        """Gets the total_price of this LineItem.  # noqa: E501

        Total price of all details, Shipping Charges, Sales Tax, Tariffs, GST, HST  # noqa: E501

        :return: The total_price of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this LineItem.

        Total price of all details, Shipping Charges, Sales Tax, Tariffs, GST, HST  # noqa: E501

        :param total_price: The total_price of this LineItem.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def purchase_order(self):
        """Gets the purchase_order of this LineItem.  # noqa: E501

        Customer purchase order  # noqa: E501

        :return: The purchase_order of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this LineItem.

        Customer purchase order  # noqa: E501

        :param purchase_order: The purchase_order of this LineItem.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def customer_reference(self):
        """Gets the customer_reference of this LineItem.  # noqa: E501

        Customer part number for reference  # noqa: E501

        :return: The customer_reference of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this LineItem.

        Customer part number for reference  # noqa: E501

        :param customer_reference: The customer_reference of this LineItem.  # noqa: E501
        :type: str
        """

        self._customer_reference = customer_reference

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this LineItem.  # noqa: E501

        Country of origin  # noqa: E501

        :return: The country_of_origin of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this LineItem.

        Country of origin  # noqa: E501

        :param country_of_origin: The country_of_origin of this LineItem.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def digi_key_product_number(self):
        """Gets the digi_key_product_number of this LineItem.  # noqa: E501

        DigiKey product number for given line item  # noqa: E501

        :return: The digi_key_product_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_product_number

    @digi_key_product_number.setter
    def digi_key_product_number(self, digi_key_product_number):
        """Sets the digi_key_product_number of this LineItem.

        DigiKey product number for given line item  # noqa: E501

        :param digi_key_product_number: The digi_key_product_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._digi_key_product_number = digi_key_product_number

    @property
    def manufacturer_product_number(self):
        """Gets the manufacturer_product_number of this LineItem.  # noqa: E501

        Manufacturer part number for given line item  # noqa: E501

        :return: The manufacturer_product_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_product_number

    @manufacturer_product_number.setter
    def manufacturer_product_number(self, manufacturer_product_number):
        """Sets the manufacturer_product_number of this LineItem.

        Manufacturer part number for given line item  # noqa: E501

        :param manufacturer_product_number: The manufacturer_product_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._manufacturer_product_number = manufacturer_product_number

    @property
    def description(self):
        """Gets the description of this LineItem.  # noqa: E501

        Description of part for given line item  # noqa: E501

        :return: The description of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItem.

        Description of part for given line item  # noqa: E501

        :param description: The description of this LineItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pack_type(self):
        """Gets the pack_type of this LineItem.  # noqa: E501

        PackType of given line item  # noqa: E501

        :return: The pack_type of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._pack_type

    @pack_type.setter
    def pack_type(self, pack_type):
        """Sets the pack_type of this LineItem.

        PackType of given line item  # noqa: E501

        :param pack_type: The pack_type of this LineItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["TapeReel", "CutTape", "Bulk", "TapeBox", "Tube", "Tray", "Box", "Bag", "Spools", "DigiReel", "Strip", "Bottle", "Canister", "Book", "Dispenser", "Sheet", "Pail", "Can", "Case", "RetailPkg", "DigiSpool", "ElectronicDelivery", "None"]  # noqa: E501
        if pack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pack_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pack_type, allowed_values)
            )

        self._pack_type = pack_type

    @property
    def quantity_initial_requested(self):
        """Gets the quantity_initial_requested of this LineItem.  # noqa: E501

        The total initial quantity requested on the order.  # noqa: E501

        :return: The quantity_initial_requested of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_initial_requested

    @quantity_initial_requested.setter
    def quantity_initial_requested(self, quantity_initial_requested):
        """Sets the quantity_initial_requested of this LineItem.

        The total initial quantity requested on the order.  # noqa: E501

        :param quantity_initial_requested: The quantity_initial_requested of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_initial_requested = quantity_initial_requested

    @property
    def quantity_ordered(self):
        """Gets the quantity_ordered of this LineItem.  # noqa: E501

        The accepted Quantity of the order. QuantityOrdered will be the same as QuantityInitialRequested at order entry. If changes are made to quantity it will be reflected in QuantityOrdered  # noqa: E501

        :return: The quantity_ordered of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_ordered

    @quantity_ordered.setter
    def quantity_ordered(self, quantity_ordered):
        """Sets the quantity_ordered of this LineItem.

        The accepted Quantity of the order. QuantityOrdered will be the same as QuantityInitialRequested at order entry. If changes are made to quantity it will be reflected in QuantityOrdered  # noqa: E501

        :param quantity_ordered: The quantity_ordered of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_ordered = quantity_ordered

    @property
    def quantity_shipped(self):
        """Gets the quantity_shipped of this LineItem.  # noqa: E501

        The sum quantity shipped  # noqa: E501

        :return: The quantity_shipped of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_shipped

    @quantity_shipped.setter
    def quantity_shipped(self, quantity_shipped):
        """Sets the quantity_shipped of this LineItem.

        The sum quantity shipped  # noqa: E501

        :param quantity_shipped: The quantity_shipped of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_shipped = quantity_shipped

    @property
    def quantity_reserved(self):
        """Gets the quantity_reserved of this LineItem.  # noqa: E501

        The Quantity reserved and not shipped.  # noqa: E501

        :return: The quantity_reserved of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_reserved

    @quantity_reserved.setter
    def quantity_reserved(self, quantity_reserved):
        """Sets the quantity_reserved of this LineItem.

        The Quantity reserved and not shipped.  # noqa: E501

        :param quantity_reserved: The quantity_reserved of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_reserved = quantity_reserved

    @property
    def quantity_back_order(self):
        """Gets the quantity_back_order of this LineItem.  # noqa: E501

        Quantity on backorder  # noqa: E501

        :return: The quantity_back_order of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_back_order

    @quantity_back_order.setter
    def quantity_back_order(self, quantity_back_order):
        """Sets the quantity_back_order of this LineItem.

        Quantity on backorder  # noqa: E501

        :param quantity_back_order: The quantity_back_order of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_back_order = quantity_back_order

    @property
    def unit_price(self):
        """Gets the unit_price of this LineItem.  # noqa: E501

        Unit price of product  # noqa: E501

        :return: The unit_price of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this LineItem.

        Unit price of product  # noqa: E501

        :param unit_price: The unit_price of this LineItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def po_line_item_number(self):
        """Gets the po_line_item_number of this LineItem.  # noqa: E501

        Line item number provided on purchase order  # noqa: E501

        :return: The po_line_item_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._po_line_item_number

    @po_line_item_number.setter
    def po_line_item_number(self, po_line_item_number):
        """Sets the po_line_item_number of this LineItem.

        Line item number provided on purchase order  # noqa: E501

        :param po_line_item_number: The po_line_item_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._po_line_item_number = po_line_item_number

    @property
    def item_shipments(self):
        """Gets the item_shipments of this LineItem.  # noqa: E501

        List of item shipments for given lineitem  # noqa: E501

        :return: The item_shipments of this LineItem.  # noqa: E501
        :rtype: list[ItemShipInfo]
        """
        return self._item_shipments

    @item_shipments.setter
    def item_shipments(self, item_shipments):
        """Sets the item_shipments of this LineItem.

        List of item shipments for given lineitem  # noqa: E501

        :param item_shipments: The item_shipments of this LineItem.  # noqa: E501
        :type: list[ItemShipInfo]
        """

        self._item_shipments = item_shipments

    @property
    def schedules(self):
        """Gets the schedules of this LineItem.  # noqa: E501

        List of schedules for given line item  # noqa: E501

        :return: The schedules of this LineItem.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this LineItem.

        List of schedules for given line item  # noqa: E501

        :param schedules: The schedules of this LineItem.  # noqa: E501
        :type: list[Schedule]
        """

        self._schedules = schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
