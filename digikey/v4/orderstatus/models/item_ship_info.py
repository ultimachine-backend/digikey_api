# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemShipInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity_shipped': 'int',
        'invoice_id': 'int',
        'shipped_date': 'datetime',
        'tracking_number': 'str',
        'expected_delivery_date': 'str'
    }

    attribute_map = {
        'quantity_shipped': 'QuantityShipped',
        'invoice_id': 'InvoiceId',
        'shipped_date': 'ShippedDate',
        'tracking_number': 'TrackingNumber',
        'expected_delivery_date': 'ExpectedDeliveryDate'
    }

    def __init__(self, quantity_shipped=None, invoice_id=None, shipped_date=None, tracking_number=None, expected_delivery_date=None):  # noqa: E501
        """ItemShipInfo - a model defined in Swagger"""  # noqa: E501

        self._quantity_shipped = None
        self._invoice_id = None
        self._shipped_date = None
        self._tracking_number = None
        self._expected_delivery_date = None
        self.discriminator = None

        if quantity_shipped is not None:
            self.quantity_shipped = quantity_shipped
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if shipped_date is not None:
            self.shipped_date = shipped_date
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if expected_delivery_date is not None:
            self.expected_delivery_date = expected_delivery_date

    @property
    def quantity_shipped(self):
        """Gets the quantity_shipped of this ItemShipInfo.  # noqa: E501

        Quantity of item shipped  # noqa: E501

        :return: The quantity_shipped of this ItemShipInfo.  # noqa: E501
        :rtype: int
        """
        return self._quantity_shipped

    @quantity_shipped.setter
    def quantity_shipped(self, quantity_shipped):
        """Sets the quantity_shipped of this ItemShipInfo.

        Quantity of item shipped  # noqa: E501

        :param quantity_shipped: The quantity_shipped of this ItemShipInfo.  # noqa: E501
        :type: int
        """

        self._quantity_shipped = quantity_shipped

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ItemShipInfo.  # noqa: E501

        Invoice ID of given item  # noqa: E501

        :return: The invoice_id of this ItemShipInfo.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ItemShipInfo.

        Invoice ID of given item  # noqa: E501

        :param invoice_id: The invoice_id of this ItemShipInfo.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def shipped_date(self):
        """Gets the shipped_date of this ItemShipInfo.  # noqa: E501

        Date shipped  # noqa: E501

        :return: The shipped_date of this ItemShipInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._shipped_date

    @shipped_date.setter
    def shipped_date(self, shipped_date):
        """Sets the shipped_date of this ItemShipInfo.

        Date shipped  # noqa: E501

        :param shipped_date: The shipped_date of this ItemShipInfo.  # noqa: E501
        :type: datetime
        """

        self._shipped_date = shipped_date

    @property
    def tracking_number(self):
        """Gets the tracking_number of this ItemShipInfo.  # noqa: E501

        Tracking number of the shipment  # noqa: E501

        :return: The tracking_number of this ItemShipInfo.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this ItemShipInfo.

        Tracking number of the shipment  # noqa: E501

        :param tracking_number: The tracking_number of this ItemShipInfo.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def expected_delivery_date(self):
        """Gets the expected_delivery_date of this ItemShipInfo.  # noqa: E501

        Expected date item to be delivered by  # noqa: E501

        :return: The expected_delivery_date of this ItemShipInfo.  # noqa: E501
        :rtype: str
        """
        return self._expected_delivery_date

    @expected_delivery_date.setter
    def expected_delivery_date(self, expected_delivery_date):
        """Sets the expected_delivery_date of this ItemShipInfo.

        Expected date item to be delivered by  # noqa: E501

        :param expected_delivery_date: The expected_delivery_date of this ItemShipInfo.  # noqa: E501
        :type: str
        """

        self._expected_delivery_date = expected_delivery_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemShipInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemShipInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
