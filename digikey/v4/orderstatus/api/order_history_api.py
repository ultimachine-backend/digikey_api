# coding: utf-8

"""
    OrderStatus

    Retrieve a list of orders within a date range or get the status and contents of a specific order. Note: When you place an order with DigiKey, we create a single “Order” in our internal systems and one or more “Sales Orders.” On our website and packing materials, we mention SalesOrder Number, Sales Order ID and Order Number. Those are referencing the “Sales Order ID” and not the “Order Number.”  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from digikey.v4.orderstatus.api_client import ApiClient


class OrderHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def retrieve_sales_order(self, sales_order_id, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieves a SalesOrder for a specific salesOrderId  # noqa: E501

        This API uses both two-legged OAuth and three-legged OAuth. <a href=\"https://developer.digikey.com/documentations#tab_link_4\" target=\"_blank\">See Documentation | OAuth 2.0: 2 Legged Flow</a> or <a href=\"https://developer.digikey.com/documentation?atab=tab_link_5\">OAuth 2.0: 3 Legged Flow</a> for information.   </br>Which endpoint should I use?  <ul><li>If you know the SalesOrderID for the Order you want to retrieve information, call the RetrieveSalesOrder endpoint.</li><li>Otherwise, call the SearchOrders endpoint and specify a date range. This endpoint will return the same information for every Order placed during that time period.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_sales_order(sales_order_id, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sales_order_id: The ID number for the Sales Order you want to retrieve. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: We return the order’s status in English unless you set the Locale to alternative values. They do not need to be the same ones used to place the Order.   Two letter country/region code. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        :param str x_digikey_customer_id: Enter the DigiKey Customer ID used to place the order
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_sales_order_with_http_info(sales_order_id, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_sales_order_with_http_info(sales_order_id, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def retrieve_sales_order_with_http_info(self, sales_order_id, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieves a SalesOrder for a specific salesOrderId  # noqa: E501

        This API uses both two-legged OAuth and three-legged OAuth. <a href=\"https://developer.digikey.com/documentations#tab_link_4\" target=\"_blank\">See Documentation | OAuth 2.0: 2 Legged Flow</a> or <a href=\"https://developer.digikey.com/documentation?atab=tab_link_5\">OAuth 2.0: 3 Legged Flow</a> for information.   </br>Which endpoint should I use?  <ul><li>If you know the SalesOrderID for the Order you want to retrieve information, call the RetrieveSalesOrder endpoint.</li><li>Otherwise, call the SearchOrders endpoint and specify a date range. This endpoint will return the same information for every Order placed during that time period.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_sales_order_with_http_info(sales_order_id, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sales_order_id: The ID number for the Sales Order you want to retrieve. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: We return the order’s status in English unless you set the Locale to alternative values. They do not need to be the same ones used to place the Order.   Two letter country/region code. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        :param str x_digikey_customer_id: Enter the DigiKey Customer ID used to place the order
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_order_id', 'x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_sales_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_order_id' is set
        if ('sales_order_id' not in params or
                params['sales_order_id'] is None):
            raise ValueError("Missing the required parameter `sales_order_id` when calling `retrieve_sales_order`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `retrieve_sales_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sales_order_id' in params:
            path_params['salesOrderId'] = params['sales_order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'oauth2AccessCodeSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/salesorder/{salesOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_orders(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieves a list of orders in a specified date range  # noqa: E501

        This API uses both two-legged OAuth and three-legged OAuth. <a href=\"https://developer.digikey.com/documentations#tab_link_4\" target=\"_blank\">See Documentation | OAuth 2.0: 2 Legged Flow</a> or <a href=\"https://developer.digikey.com/documentation?atab=tab_link_5\">OAuth 2.0: 3 Legged Flow</a> for information.   </br>Which endpoint should I use?  <ul><li>If you know the SalesOrderID for the Order you want to retrieve information, call the RetrieveSalesOrder endpoint.</li><li>Otherwise, call the SearchOrders endpoint and specify a date range. This endpoint will return the same information for every Order placed during that time period.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_orders(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param bool shared: Determines if orders shared with customer ID will return. True means shared values will be retrieved, false means shared orders will not be retrieved.  *Default value : false*
        :param datetime start_date: Starting date of the date range for order history. Format: YYYY-MM-DD  *Default value: current day - 30 days*
        :param datetime end_date: Ending date of the date range for order history. Format: YYYY-MM-DD  *Default value: current date*
        :param int page_number: PageNumber to use in pagination              *Default value: 1*
        :param int page_size: PageSize to use in pagination              *Default value : 10              Maximum value: 25*
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: We return the order’s status in English unless you set the Locale to alternative values. They do not need to be the same ones used to place the Order.   Two letter country/region code. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        :param str x_digikey_customer_id: Enter the DigiKey Customer ID used to place the order
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_orders_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_orders_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def search_orders_with_http_info(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieves a list of orders in a specified date range  # noqa: E501

        This API uses both two-legged OAuth and three-legged OAuth. <a href=\"https://developer.digikey.com/documentations#tab_link_4\" target=\"_blank\">See Documentation | OAuth 2.0: 2 Legged Flow</a> or <a href=\"https://developer.digikey.com/documentation?atab=tab_link_5\">OAuth 2.0: 3 Legged Flow</a> for information.   </br>Which endpoint should I use?  <ul><li>If you know the SalesOrderID for the Order you want to retrieve information, call the RetrieveSalesOrder endpoint.</li><li>Otherwise, call the SearchOrders endpoint and specify a date range. This endpoint will return the same information for every Order placed during that time period.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_orders_with_http_info(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param bool shared: Determines if orders shared with customer ID will return. True means shared values will be retrieved, false means shared orders will not be retrieved.  *Default value : false*
        :param datetime start_date: Starting date of the date range for order history. Format: YYYY-MM-DD  *Default value: current day - 30 days*
        :param datetime end_date: Ending date of the date range for order history. Format: YYYY-MM-DD  *Default value: current date*
        :param int page_number: PageNumber to use in pagination              *Default value: 1*
        :param int page_size: PageSize to use in pagination              *Default value : 10              Maximum value: 25*
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: We return the order’s status in English unless you set the Locale to alternative values. They do not need to be the same ones used to place the Order.   Two letter country/region code. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        :param str x_digikey_customer_id: Enter the DigiKey Customer ID used to place the order
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_digikey_client_id', 'shared', 'start_date', 'end_date', 'page_number', 'page_size', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `search_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'shared' in params:
            query_params.append(('Shared', params['shared']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'oauth2AccessCodeSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
