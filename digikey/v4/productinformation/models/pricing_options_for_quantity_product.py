# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PricingOptionsForQuantityProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digi_key_product_number': 'str',
        'quantity_priced': 'int',
        'minimum_order_quantity': 'int',
        'extended_price': 'float',
        'unit_price': 'float',
        'package_type': 'PackageType',
        'tariff_information': 'TariffInformation',
        'marketplace': 'bool'
    }

    attribute_map = {
        'digi_key_product_number': 'DigiKeyProductNumber',
        'quantity_priced': 'QuantityPriced',
        'minimum_order_quantity': 'MinimumOrderQuantity',
        'extended_price': 'ExtendedPrice',
        'unit_price': 'UnitPrice',
        'package_type': 'PackageType',
        'tariff_information': 'TariffInformation',
        'marketplace': 'Marketplace'
    }

    def __init__(self, digi_key_product_number=None, quantity_priced=None, minimum_order_quantity=None, extended_price=None, unit_price=None, package_type=None, tariff_information=None, marketplace=None):  # noqa: E501
        """PricingOptionsForQuantityProduct - a model defined in Swagger"""  # noqa: E501

        self._digi_key_product_number = None
        self._quantity_priced = None
        self._minimum_order_quantity = None
        self._extended_price = None
        self._unit_price = None
        self._package_type = None
        self._tariff_information = None
        self._marketplace = None
        self.discriminator = None

        if digi_key_product_number is not None:
            self.digi_key_product_number = digi_key_product_number
        if quantity_priced is not None:
            self.quantity_priced = quantity_priced
        if minimum_order_quantity is not None:
            self.minimum_order_quantity = minimum_order_quantity
        if extended_price is not None:
            self.extended_price = extended_price
        if unit_price is not None:
            self.unit_price = unit_price
        if package_type is not None:
            self.package_type = package_type
        if tariff_information is not None:
            self.tariff_information = tariff_information
        if marketplace is not None:
            self.marketplace = marketplace

    @property
    def digi_key_product_number(self):
        """Gets the digi_key_product_number of this PricingOptionsForQuantityProduct.  # noqa: E501

        DigiKey Product Number for product  # noqa: E501

        :return: The digi_key_product_number of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_product_number

    @digi_key_product_number.setter
    def digi_key_product_number(self, digi_key_product_number):
        """Sets the digi_key_product_number of this PricingOptionsForQuantityProduct.

        DigiKey Product Number for product  # noqa: E501

        :param digi_key_product_number: The digi_key_product_number of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: str
        """

        self._digi_key_product_number = digi_key_product_number

    @property
    def quantity_priced(self):
        """Gets the quantity_priced of this PricingOptionsForQuantityProduct.  # noqa: E501

        QuantityPriced  # noqa: E501

        :return: The quantity_priced of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: int
        """
        return self._quantity_priced

    @quantity_priced.setter
    def quantity_priced(self, quantity_priced):
        """Sets the quantity_priced of this PricingOptionsForQuantityProduct.

        QuantityPriced  # noqa: E501

        :param quantity_priced: The quantity_priced of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: int
        """

        self._quantity_priced = quantity_priced

    @property
    def minimum_order_quantity(self):
        """Gets the minimum_order_quantity of this PricingOptionsForQuantityProduct.  # noqa: E501

        Minimum quantity available for order  # noqa: E501

        :return: The minimum_order_quantity of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: int
        """
        return self._minimum_order_quantity

    @minimum_order_quantity.setter
    def minimum_order_quantity(self, minimum_order_quantity):
        """Sets the minimum_order_quantity of this PricingOptionsForQuantityProduct.

        Minimum quantity available for order  # noqa: E501

        :param minimum_order_quantity: The minimum_order_quantity of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: int
        """

        self._minimum_order_quantity = minimum_order_quantity

    @property
    def extended_price(self):
        """Gets the extended_price of this PricingOptionsForQuantityProduct.  # noqa: E501

        The extended price of the product  # noqa: E501

        :return: The extended_price of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: float
        """
        return self._extended_price

    @extended_price.setter
    def extended_price(self, extended_price):
        """Sets the extended_price of this PricingOptionsForQuantityProduct.

        The extended price of the product  # noqa: E501

        :param extended_price: The extended_price of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: float
        """

        self._extended_price = extended_price

    @property
    def unit_price(self):
        """Gets the unit_price of this PricingOptionsForQuantityProduct.  # noqa: E501

        The unit price of the product  # noqa: E501

        :return: The unit_price of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PricingOptionsForQuantityProduct.

        The unit price of the product  # noqa: E501

        :param unit_price: The unit_price of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def package_type(self):
        """Gets the package_type of this PricingOptionsForQuantityProduct.  # noqa: E501


        :return: The package_type of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: PackageType
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PricingOptionsForQuantityProduct.


        :param package_type: The package_type of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: PackageType
        """

        self._package_type = package_type

    @property
    def tariff_information(self):
        """Gets the tariff_information of this PricingOptionsForQuantityProduct.  # noqa: E501


        :return: The tariff_information of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: TariffInformation
        """
        return self._tariff_information

    @tariff_information.setter
    def tariff_information(self, tariff_information):
        """Sets the tariff_information of this PricingOptionsForQuantityProduct.


        :param tariff_information: The tariff_information of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: TariffInformation
        """

        self._tariff_information = tariff_information

    @property
    def marketplace(self):
        """Gets the marketplace of this PricingOptionsForQuantityProduct.  # noqa: E501

        Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply.  # noqa: E501

        :return: The marketplace of this PricingOptionsForQuantityProduct.  # noqa: E501
        :rtype: bool
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this PricingOptionsForQuantityProduct.

        Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply.  # noqa: E501

        :param marketplace: The marketplace of this PricingOptionsForQuantityProduct.  # noqa: E501
        :type: bool
        """

        self._marketplace = marketplace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingOptionsForQuantityProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingOptionsForQuantityProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
