# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PricingOptionsForQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pricing_option': 'str',
        'total_quantity_priced': 'int',
        'total_price': 'float',
        'quantity_available': 'int',
        'products': 'list[PricingOptionsForQuantityProduct]'
    }

    attribute_map = {
        'pricing_option': 'PricingOption',
        'total_quantity_priced': 'TotalQuantityPriced',
        'total_price': 'TotalPrice',
        'quantity_available': 'QuantityAvailable',
        'products': 'Products'
    }

    def __init__(self, pricing_option=None, total_quantity_priced=None, total_price=None, quantity_available=None, products=None):  # noqa: E501
        """PricingOptionsForQuantity - a model defined in Swagger"""  # noqa: E501

        self._pricing_option = None
        self._total_quantity_priced = None
        self._total_price = None
        self._quantity_available = None
        self._products = None
        self.discriminator = None

        if pricing_option is not None:
            self.pricing_option = pricing_option
        if total_quantity_priced is not None:
            self.total_quantity_priced = total_quantity_priced
        if total_price is not None:
            self.total_price = total_price
        if quantity_available is not None:
            self.quantity_available = quantity_available
        if products is not None:
            self.products = products

    @property
    def pricing_option(self):
        """Gets the pricing_option of this PricingOptionsForQuantity.  # noqa: E501

        Pricing option for product configuration  # noqa: E501

        :return: The pricing_option of this PricingOptionsForQuantity.  # noqa: E501
        :rtype: str
        """
        return self._pricing_option

    @pricing_option.setter
    def pricing_option(self, pricing_option):
        """Sets the pricing_option of this PricingOptionsForQuantity.

        Pricing option for product configuration  # noqa: E501

        :param pricing_option: The pricing_option of this PricingOptionsForQuantity.  # noqa: E501
        :type: str
        """
        allowed_values = ["Exact", "MinimumOrderQuantity", "BetterValue", "MaxOrderQuantity"]  # noqa: E501
        if pricing_option not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_option` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_option, allowed_values)
            )

        self._pricing_option = pricing_option

    @property
    def total_quantity_priced(self):
        """Gets the total_quantity_priced of this PricingOptionsForQuantity.  # noqa: E501

        Nested within this are the different package types. Each of those has a QuantityPriced.  # noqa: E501

        :return: The total_quantity_priced of this PricingOptionsForQuantity.  # noqa: E501
        :rtype: int
        """
        return self._total_quantity_priced

    @total_quantity_priced.setter
    def total_quantity_priced(self, total_quantity_priced):
        """Sets the total_quantity_priced of this PricingOptionsForQuantity.

        Nested within this are the different package types. Each of those has a QuantityPriced.  # noqa: E501

        :param total_quantity_priced: The total_quantity_priced of this PricingOptionsForQuantity.  # noqa: E501
        :type: int
        """

        self._total_quantity_priced = total_quantity_priced

    @property
    def total_price(self):
        """Gets the total_price of this PricingOptionsForQuantity.  # noqa: E501

        Nested within this are the different package types. Each of those has a ExtendedPrice.  # noqa: E501

        :return: The total_price of this PricingOptionsForQuantity.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this PricingOptionsForQuantity.

        Nested within this are the different package types. Each of those has a ExtendedPrice.  # noqa: E501

        :param total_price: The total_price of this PricingOptionsForQuantity.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def quantity_available(self):
        """Gets the quantity_available of this PricingOptionsForQuantity.  # noqa: E501

        The total quantity available  # noqa: E501

        :return: The quantity_available of this PricingOptionsForQuantity.  # noqa: E501
        :rtype: int
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this PricingOptionsForQuantity.

        The total quantity available  # noqa: E501

        :param quantity_available: The quantity_available of this PricingOptionsForQuantity.  # noqa: E501
        :type: int
        """

        self._quantity_available = quantity_available

    @property
    def products(self):
        """Gets the products of this PricingOptionsForQuantity.  # noqa: E501

        PricingOptionsForQuantityProduct  # noqa: E501

        :return: The products of this PricingOptionsForQuantity.  # noqa: E501
        :rtype: list[PricingOptionsForQuantityProduct]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this PricingOptionsForQuantity.

        PricingOptionsForQuantityProduct  # noqa: E501

        :param products: The products of this PricingOptionsForQuantity.  # noqa: E501
        :type: list[PricingOptionsForQuantityProduct]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingOptionsForQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingOptionsForQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
