# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from digikey.v4.productinformation.api_client import ApiClient


class ProductSearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def alternate_packaging(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Alternate Packaging for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alternate_packaging(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: AlternatePackagingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alternate_packaging_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.alternate_packaging_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def alternate_packaging_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Alternate Packaging for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alternate_packaging_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: AlternatePackagingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alternate_packaging" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `alternate_packaging`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `alternate_packaging`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/alternatepackaging', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlternatePackagingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associations(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Associations for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associations(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The product to retrieve substitutions for. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductAssociationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associations_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.associations_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def associations_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Associations for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associations_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The product to retrieve substitutions for. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductAssociationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `associations`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductAssociationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def categories(self, **kwargs):  # noqa: E501
        """Retrieve all Product Categories. CategoryId can be used in KeywordSearch to restrict the search to a given Category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def categories_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all Product Categories. CategoryId can be used in KeywordSearch to restrict the search to a given Category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CategoriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def categories_by_id(self, category_id, **kwargs):  # noqa: E501
        """Returns Category for given Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.categories_by_id(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.categories_by_id_with_http_info(category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.categories_by_id_with_http_info(category_id, **kwargs)  # noqa: E501
            return data

    def categories_by_id_with_http_info(self, category_id, **kwargs):  # noqa: E501
        """Returns Category for given Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.categories_by_id_with_http_info(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method categories_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `categories_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/categories/{categoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CategoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def digi_reel_pricing(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve DigiReel pricing for a given DigiKeyProductNumber and RequestedQuantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.digi_reel_pricing(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The Digi-Key ProductNumber requested for Digi-Reel price calculation. It must be a  Digi-Key Product number that is for a Digi-Reel pack type. (required)
        :param int requested_quantity: The quantity of the product you are looking to create a Digi-Reel with. Must be greater  than 0. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: DigiReelPricing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.digi_reel_pricing_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.digi_reel_pricing_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def digi_reel_pricing_with_http_info(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve DigiReel pricing for a given DigiKeyProductNumber and RequestedQuantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.digi_reel_pricing_with_http_info(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The Digi-Key ProductNumber requested for Digi-Reel price calculation. It must be a  Digi-Key Product number that is for a Digi-Reel pack type. (required)
        :param int requested_quantity: The quantity of the product you are looking to create a Digi-Reel with. Must be greater  than 0. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: DigiReelPricing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'requested_quantity', 'x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method digi_reel_pricing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `digi_reel_pricing`")  # noqa: E501
        # verify the required parameter 'requested_quantity' is set
        if ('requested_quantity' not in params or
                params['requested_quantity'] is None):
            raise ValueError("Missing the required parameter `requested_quantity` when calling `digi_reel_pricing`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `digi_reel_pricing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'requested_quantity' in params:
            query_params.append(('requestedQuantity', params['requested_quantity']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/digireelpricing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DigiReelPricing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keyword_search(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter parameters, keywords, or a manufacturer part number/DigiKey part number and receive limited product information for each match. Note that MyPricing is not returned.  # noqa: E501

        Search for product information based on part number, description, manufacturer, or category. This new API supports two-legged and three-legged OAuth authentication.   [all endpoints for https://developer.digikey.com/products/product-information-v4/productsearch]    MyPricing is not available in the KeywordSearch response, and only StandardPricing is returned.  Please use the ProductDetails or ProductPricing endpoints to receive MyPricing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keyword_search(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str includes: 
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.
        :param KeywordRequest body: 
        :return: KeywordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keyword_search_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keyword_search_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def keyword_search_with_http_info(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter parameters, keywords, or a manufacturer part number/DigiKey part number and receive limited product information for each match. Note that MyPricing is not returned.  # noqa: E501

        Search for product information based on part number, description, manufacturer, or category. This new API supports two-legged and three-legged OAuth authentication.   [all endpoints for https://developer.digikey.com/products/product-information-v4/productsearch]    MyPricing is not available in the KeywordSearch response, and only StandardPricing is returned.  Please use the ProductDetails or ProductPricing endpoints to receive MyPricing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keyword_search_with_http_info(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str includes: 
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.
        :param KeywordRequest body: 
        :return: KeywordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_digikey_client_id', 'includes', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keyword_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `keyword_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'includes' in params:
            query_params.append(('includes', params['includes']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/keyword', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeywordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def manufacturers(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve all Product Manufacturers. ManufacturersId can be used in KeywordSearch to restrict the search to a given Manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.manufacturers(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :return: ManufacturersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.manufacturers_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.manufacturers_with_http_info(x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def manufacturers_with_http_info(self, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve all Product Manufacturers. ManufacturersId can be used in KeywordSearch to restrict the search to a given Manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.manufacturers_with_http_info(x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :return: ManufacturersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manufacturers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `manufacturers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/manufacturers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def media(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve all media for a given product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.media(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: MediaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.media_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.media_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def media_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve all media for a given product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.media_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: MediaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `media`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/media', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def package_type_by_quantity(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Deprecated – please use PricingByQuantity endpoint to receive pricing for all package types when you enter a product number and desired quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.package_type_by_quantity(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: A product number. Can be either Digi-Key or Manufacturer, but some manufacturer product  numbers are ambiguous and will not be found. A DKR product number will override a CT packagingPreference. (required)
        :param int requested_quantity: The quantity of the product that you are interested in. This will be used to determine  the quantity to purchase in standard tape and reel, and also in your product preference for the remainder. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str packaging_preference: Can be either \"CT\" for Cut Tape or \"DKR\" for Digi-Reel. This will select what package  type to use for the remainder of quantity outside a standard reel.
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: PackageTypeByQuantityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.package_type_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.package_type_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def package_type_by_quantity_with_http_info(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Deprecated – please use PricingByQuantity endpoint to receive pricing for all package types when you enter a product number and desired quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.package_type_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: A product number. Can be either Digi-Key or Manufacturer, but some manufacturer product  numbers are ambiguous and will not be found. A DKR product number will override a CT packagingPreference. (required)
        :param int requested_quantity: The quantity of the product that you are interested in. This will be used to determine  the quantity to purchase in standard tape and reel, and also in your product preference for the remainder. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str packaging_preference: Can be either \"CT\" for Cut Tape or \"DKR\" for Digi-Reel. This will select what package  type to use for the remainder of quantity outside a standard reel.
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: PackageTypeByQuantityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'requested_quantity', 'x_digikey_client_id', 'packaging_preference', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_type_by_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `package_type_by_quantity`")  # noqa: E501
        # verify the required parameter 'requested_quantity' is set
        if ('requested_quantity' not in params or
                params['requested_quantity'] is None):
            raise ValueError("Missing the required parameter `requested_quantity` when calling `package_type_by_quantity`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `package_type_by_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'requested_quantity' in params:
            query_params.append(('requestedQuantity', params['requested_quantity']))  # noqa: E501
        if 'packaging_preference' in params:
            query_params.append(('packagingPreference', params['packaging_preference']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/packagetypebyquantity/{productNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageTypeByQuantityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pricing_options_by_quantity(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number and requested quantity to receive the price for that quantity. MyPricing is shown if applicable.  # noqa: E501

        The PricingOption in the response may contain up to four sets of pricing.  <ul><li>Exact: We priced the exact amount you requested.</li><li>MinimumOrderQuantity: We increased the amount you requested to the minimum order quantity</li><li>MaxOrderQuantity : We lowered the amount you requested to the maximum order quantity</li><li>BetterValue: We increased the amount you requested to match a manufacturer's standard package and the total cost is lower than the amount you requested.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricing_options_by_quantity(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: ProductNumber to search on. You can enter a manufacturer part number or a DigiKey part number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number. (required)
        :param int requested_quantity: The RequestedQuantity we used for the API call. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str manufacturer_id: Use when searching for manufacturer product numbers like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want. You can look up the manufacturer id in the Manufacturers endpoint.
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: PricingOptionsForQuantityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pricing_options_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pricing_options_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def pricing_options_by_quantity_with_http_info(self, product_number, requested_quantity, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number and requested quantity to receive the price for that quantity. MyPricing is shown if applicable.  # noqa: E501

        The PricingOption in the response may contain up to four sets of pricing.  <ul><li>Exact: We priced the exact amount you requested.</li><li>MinimumOrderQuantity: We increased the amount you requested to the minimum order quantity</li><li>MaxOrderQuantity : We lowered the amount you requested to the maximum order quantity</li><li>BetterValue: We increased the amount you requested to match a manufacturer's standard package and the total cost is lower than the amount you requested.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricing_options_by_quantity_with_http_info(product_number, requested_quantity, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: ProductNumber to search on. You can enter a manufacturer part number or a DigiKey part number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number. (required)
        :param int requested_quantity: The RequestedQuantity we used for the API call. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str manufacturer_id: Use when searching for manufacturer product numbers like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want. You can look up the manufacturer id in the Manufacturers endpoint.
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: PricingOptionsForQuantityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'requested_quantity', 'x_digikey_client_id', 'manufacturer_id', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_options_by_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `pricing_options_by_quantity`")  # noqa: E501
        # verify the required parameter 'requested_quantity' is set
        if ('requested_quantity' not in params or
                params['requested_quantity'] is None):
            raise ValueError("Missing the required parameter `requested_quantity` when calling `pricing_options_by_quantity`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `pricing_options_by_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501
        if 'requested_quantity' in params:
            path_params['requestedQuantity'] = params['requested_quantity']  # noqa: E501

        query_params = []
        if 'manufacturer_id' in params:
            query_params.append(('manufacturerId', params['manufacturer_id']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/pricingbyquantity/{requestedQuantity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PricingOptionsForQuantityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_details(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number and receive expanded production information for a single-matched product. MyPricing is shown if applicable.  # noqa: E501

        Works best with a Digi-Key product number. MyPricing is shown if applicable.  Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_details(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The product to retrieve details for. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str manufacturer_id: Use when searching for manufacturer product number like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want.
        :param str includes: 
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_details_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_details_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def product_details_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number and receive expanded production information for a single-matched product. MyPricing is shown if applicable.  # noqa: E501

        Works best with a Digi-Key product number. MyPricing is shown if applicable.  Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_details_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The product to retrieve details for. (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str manufacturer_id: Use when searching for manufacturer product number like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want.
        :param str includes: 
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'manufacturer_id', 'includes', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `product_details`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `product_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'manufacturer_id' in params:
            query_params.append(('manufacturerId', params['manufacturer_id']))  # noqa: E501
        if 'includes' in params:
            query_params.append(('includes', params['includes']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/productdetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_pricing(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number or partial manufacturer part number/DigiKey part number and receive product information for each matched product. MyPricing is shown if applicable.  # noqa: E501

        Allows you to use inStock and excludeMarketplace as limit. If there are multiple matching parts, you can see the additional ones by incrementing your input using the offset and limit fields. Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_pricing(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: ProductNumber to search on. Can be partial part number, manufacturer part number, or a Digi-Key part number. Enter the ProductNumber to be searched. You can enter a manufacturer part number or a DigiKey part number. You can enter a partial or complete product number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number. (required)
        :param str x_digikey_client_id: The Client Id for your App. Enter the ClientID for the Product App used to make the call. (required)
        :param int limit: Enter the maximum number of products to be returned. The maximum amount is 10. Default value: 5
        :param int offset: Enter the starting index for the records to be returned. This is used when making subsequent calls for the same ProductNumber. Default value: 0
        :param bool in_stock: Enter true to exclude products that are not in stock. Default value : false
        :param bool exclude_marketplace: Enter true to exclude Marketplace items and limit results to those fulfilled by DigiKey. Default value: false
        :param bool exclude_tariff:
        :param str x_digikey_locale_site: This value determines which country’s prices are used for StandardPricing and MyPricing. Also, product restrictions can differ by country. Acceptable values include: AT, AU, BE, BG, BR, CA, CH, CN, CZ, DE, DK, EE, ES, FI, FR, GR, HK, HU, IE, IL, IN, IT, JP, KR, LT, LU, LV, MX, MY, NL, NO, NZ, PH, PL, PT, RO, SE, SG, SI, SK, TH, TW, UK, US, ZA Default value: US
        :param str x_digikey_locale_language: This value determines which language is used for the links in reply. If the entered language is not valid for the entered Locale-Site, it will default to English. Acceptable values include: CS, DA, DE, EN, ES, FI, FR, HE, HU, IT, JA, KO, NL, NO, PL, PT, RO, SV, TH, ZHS, ZHT Default value: English
        :param str x_digikey_locale_currency: This value determines which country’s prices are used for StandardPricing and MyPricing. If the value is not allowed for the entered Locale-Site, it defaults to the primary currency for that Locale-Site. Ex: If Locale-Currency = EUR and Locale-Site = US, then the system will default to USD and note that in the response. Acceptable values include: AUD, CAD, CHF, CNY, CZK, DKK, EUR, GBP, HKD, HUF, ILS, INR, JPY, KRW, MYR, NOK, NZD, PHP, PLN, RON, SEK, SGD, THB, TWD, USD, ZAR Default value: primary currency for the entered Locale-site.
        :param str x_digikey_customer_id: This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.
        :return: ProductPricingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_pricing_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_pricing_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def product_pricing_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Enter a manufacturer part number/DigiKey part number or partial manufacturer part number/DigiKey part number and receive product information for each matched product. MyPricing is shown if applicable.  # noqa: E501

        Allows you to use inStock and excludeMarketplace as limit. If there are multiple matching parts, you can see the additional ones by incrementing your input using the offset and limit fields. Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_pricing_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: ProductNumber to search on. Can be partial part number, manufacturer part number, or a Digi-Key part number. Enter the ProductNumber to be searched. You can enter a manufacturer part number or a DigiKey part number. You can enter a partial or complete product number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number. (required)
        :param str x_digikey_client_id: The Client Id for your App. Enter the ClientID for the Product App used to make the call. (required)
        :param int limit: Enter the maximum number of products to be returned. The maximum amount is 10. Default value: 5
        :param int offset: Enter the starting index for the records to be returned. This is used when making subsequent calls for the same ProductNumber. Default value: 0
        :param bool in_stock: Enter true to exclude products that are not in stock. Default value : false
        :param bool exclude_marketplace: Enter true to exclude Marketplace items and limit results to those fulfilled by DigiKey. Default value: false
        :param bool exclude_tariff:
        :param str x_digikey_locale_site: This value determines which country’s prices are used for StandardPricing and MyPricing. Also, product restrictions can differ by country. Acceptable values include: AT, AU, BE, BG, BR, CA, CH, CN, CZ, DE, DK, EE, ES, FI, FR, GR, HK, HU, IE, IL, IN, IT, JP, KR, LT, LU, LV, MX, MY, NL, NO, NZ, PH, PL, PT, RO, SE, SG, SI, SK, TH, TW, UK, US, ZA Default value: US
        :param str x_digikey_locale_language: This value determines which language is used for the links in reply. If the entered language is not valid for the entered Locale-Site, it will default to English. Acceptable values include: CS, DA, DE, EN, ES, FI, FR, HE, HU, IT, JA, KO, NL, NO, PL, PT, RO, SV, TH, ZHS, ZHT Default value: English
        :param str x_digikey_locale_currency: This value determines which country’s prices are used for StandardPricing and MyPricing. If the value is not allowed for the entered Locale-Site, it defaults to the primary currency for that Locale-Site. Ex: If Locale-Currency = EUR and Locale-Site = US, then the system will default to USD and note that in the response. Acceptable values include: AUD, CAD, CHF, CNY, CZK, DKK, EUR, GBP, HKD, HUF, ILS, INR, JPY, KRW, MYR, NOK, NZD, PHP, PLN, RON, SEK, SGD, THB, TWD, USD, ZAR Default value: primary currency for the entered Locale-site.
        :param str x_digikey_customer_id: This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.
        :return: ProductPricingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'limit', 'offset', 'in_stock', 'exclude_marketplace', 'exclude_tariff', 'x_digikey_locale_site', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_pricing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `product_pricing`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `product_pricing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'in_stock' in params:
            query_params.append(('inStock', params['in_stock']))  # noqa: E501
        if 'exclude_marketplace' in params:
            query_params.append(('excludeMarketplace', params['exclude_marketplace']))  # noqa: E501
        if 'exclude_tariff' in params:
            query_params.append(('excludeTariff', params['exclude_tariff']))  # noqa: E501

        header_params = {}
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/pricing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductPricingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recommended_products(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Recommended Products for a given product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recommended_products(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The Product being searched for (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param int limit: The number of records to be returned
        :param str search_option_list: A comma delimited list of filters that can be used to limit results. Available filters  are the following: LeadFree, CollapsePackingTypes, ExcludeNonStock, Has3DModel, InStock, ManufacturerPartSearch,  NewProductsOnly, RoHSCompliant.
        :param bool exclude_market_place_products: Used to exclude MarkPlace products from search results. Default is false
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :return: RecommendedProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recommended_products_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.recommended_products_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def recommended_products_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Recommended Products for a given product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recommended_products_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: The Product being searched for (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param int limit: The number of records to be returned
        :param str search_option_list: A comma delimited list of filters that can be used to limit results. Available filters  are the following: LeadFree, CollapsePackingTypes, ExcludeNonStock, Has3DModel, InStock, ManufacturerPartSearch,  NewProductsOnly, RoHSCompliant.
        :param bool exclude_market_place_products: Used to exclude MarkPlace products from search results. Default is false
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :return: RecommendedProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'limit', 'search_option_list', 'exclude_market_place_products', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recommended_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `recommended_products`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `recommended_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'search_option_list' in params:
            query_params.append(('searchOptionList', params['search_option_list']))  # noqa: E501
        if 'exclude_market_place_products' in params:
            query_params.append(('excludeMarketPlaceProducts', params['exclude_market_place_products']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/recommendedproducts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecommendedProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def substitutions(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Substitutions for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.substitutions(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str includes:
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductSubstitutesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.substitutions_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.substitutions_with_http_info(product_number, x_digikey_client_id, **kwargs)  # noqa: E501
            return data

    def substitutions_with_http_info(self, product_number, x_digikey_client_id, **kwargs):  # noqa: E501
        """Retrieve Substitutions for a given product  # noqa: E501

        Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and  may not  return the correct product.  Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United  States.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.substitutions_with_http_info(product_number, x_digikey_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_number: (required)
        :param str x_digikey_client_id: The Client Id for your app. (required)
        :param str includes:
        :param str x_digikey_locale_language: Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no. Default value: en
        :param str x_digikey_locale_currency: Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP. Default value: primary currency for the entered Locale-site.
        :param str x_digikey_locale_site: Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH. Default value: US
        :param str x_digikey_customer_id: Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.
        :return: ProductSubstitutesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_number', 'x_digikey_client_id', 'includes', 'x_digikey_locale_language', 'x_digikey_locale_currency', 'x_digikey_locale_site', 'x_digikey_customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method substitutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_number' is set
        if ('product_number' not in params or
                params['product_number'] is None):
            raise ValueError("Missing the required parameter `product_number` when calling `substitutions`")  # noqa: E501
        # verify the required parameter 'x_digikey_client_id' is set
        if ('x_digikey_client_id' not in params or
                params['x_digikey_client_id'] is None):
            raise ValueError("Missing the required parameter `x_digikey_client_id` when calling `substitutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_number' in params:
            path_params['productNumber'] = params['product_number']  # noqa: E501

        query_params = []
        if 'includes' in params:
            query_params.append(('includes', params['includes']))  # noqa: E501

        header_params = {}
        if 'x_digikey_client_id' in params:
            header_params['X-DIGIKEY-Client-Id'] = params['x_digikey_client_id']  # noqa: E501
        if 'x_digikey_locale_language' in params:
            header_params['X-DIGIKEY-Locale-Language'] = params['x_digikey_locale_language']  # noqa: E501
        if 'x_digikey_locale_currency' in params:
            header_params['X-DIGIKEY-Locale-Currency'] = params['x_digikey_locale_currency']  # noqa: E501
        if 'x_digikey_locale_site' in params:
            header_params['X-DIGIKEY-Locale-Site'] = params['x_digikey_locale_site']  # noqa: E501
        if 'x_digikey_customer_id' in params:
            header_params['X-DIGIKEY-Customer-Id'] = params['x_digikey_customer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity']  # noqa: E501

        return self.api_client.call_api(
            '/search/{productNumber}/substitutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSubstitutesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
