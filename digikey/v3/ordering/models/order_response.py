# coding: utf-8

"""
    Ordering Api

    Queues an order for processing.  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'sales_order_id': 'int',
        'purchase_order_number': 'str'
    }

    attribute_map = {
        'message': 'Message',
        'sales_order_id': 'SalesOrderId',
        'purchase_order_number': 'PurchaseOrderNumber'
    }

    def __init__(self, message=None, sales_order_id=None, purchase_order_number=None):  # noqa: E501
        """OrderResponse - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._sales_order_id = None
        self._purchase_order_number = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number

    @property
    def message(self):
        """Gets the message of this OrderResponse.  # noqa: E501

        A string message containing useful information about the API request  be it success, informational, or error.  # noqa: E501

        :return: The message of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OrderResponse.

        A string message containing useful information about the API request  be it success, informational, or error.  # noqa: E501

        :param message: The message of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this OrderResponse.  # noqa: E501

        The resulting salesorder ID from the API request.  # noqa: E501

        :return: The sales_order_id of this OrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this OrderResponse.

        The resulting salesorder ID from the API request.  # noqa: E501

        :param sales_order_id: The sales_order_id of this OrderResponse.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this OrderResponse.  # noqa: E501

        The Purchase Order Number provided by customer on input.  # noqa: E501

        :return: The purchase_order_number of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this OrderResponse.

        The Purchase Order Number provided by customer on input.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
