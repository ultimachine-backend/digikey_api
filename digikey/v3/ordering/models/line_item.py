# coding: utf-8

"""
    Ordering Api

    Queues an order for processing.  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_line_item_id': 'str',
        'product_description': 'str',
        'customer_part_number': 'str',
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'manufacturer_name': 'str',
        'requested_quantity': 'int',
        'unit_price': 'float',
        'quote_id': 'int',
        'delivery_date': 'datetime',
        'line_item_notes': 'list[str]',
        'schedules': 'list[Schedule]'
    }

    attribute_map = {
        'customer_line_item_id': 'CustomerLineItemId',
        'product_description': 'ProductDescription',
        'customer_part_number': 'CustomerPartNumber',
        'digi_key_part_number': 'DigiKeyPartNumber',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'manufacturer_name': 'ManufacturerName',
        'requested_quantity': 'RequestedQuantity',
        'unit_price': 'UnitPrice',
        'quote_id': 'QuoteId',
        'delivery_date': 'DeliveryDate',
        'line_item_notes': 'LineItemNotes',
        'schedules': 'Schedules'
    }

    def __init__(self, customer_line_item_id=None, product_description=None, customer_part_number=None, digi_key_part_number=None, manufacturer_part_number=None, manufacturer_name=None, requested_quantity=None, unit_price=None, quote_id=None, delivery_date=None, line_item_notes=None, schedules=None):  # noqa: E501
        """LineItem - a model defined in Swagger"""  # noqa: E501

        self._customer_line_item_id = None
        self._product_description = None
        self._customer_part_number = None
        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._manufacturer_name = None
        self._requested_quantity = None
        self._unit_price = None
        self._quote_id = None
        self._delivery_date = None
        self._line_item_notes = None
        self._schedules = None
        self.discriminator = None

        if customer_line_item_id is not None:
            self.customer_line_item_id = customer_line_item_id
        if product_description is not None:
            self.product_description = product_description
        if customer_part_number is not None:
            self.customer_part_number = customer_part_number
        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if manufacturer_name is not None:
            self.manufacturer_name = manufacturer_name
        if requested_quantity is not None:
            self.requested_quantity = requested_quantity
        if unit_price is not None:
            self.unit_price = unit_price
        if quote_id is not None:
            self.quote_id = quote_id
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if line_item_notes is not None:
            self.line_item_notes = line_item_notes
        if schedules is not None:
            self.schedules = schedules

    @property
    def customer_line_item_id(self):
        """Gets the customer_line_item_id of this LineItem.  # noqa: E501

        Line item number for customer use  # noqa: E501

        :return: The customer_line_item_id of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._customer_line_item_id

    @customer_line_item_id.setter
    def customer_line_item_id(self, customer_line_item_id):
        """Sets the customer_line_item_id of this LineItem.

        Line item number for customer use  # noqa: E501

        :param customer_line_item_id: The customer_line_item_id of this LineItem.  # noqa: E501
        :type: str
        """

        self._customer_line_item_id = customer_line_item_id

    @property
    def product_description(self):
        """Gets the product_description of this LineItem.  # noqa: E501

        Optional description of the product  # noqa: E501

        :return: The product_description of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this LineItem.

        Optional description of the product  # noqa: E501

        :param product_description: The product_description of this LineItem.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def customer_part_number(self):
        """Gets the customer_part_number of this LineItem.  # noqa: E501

        Optional special customer part number if your company has a special part number system with Digi-Key  # noqa: E501

        :return: The customer_part_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._customer_part_number

    @customer_part_number.setter
    def customer_part_number(self, customer_part_number):
        """Sets the customer_part_number of this LineItem.

        Optional special customer part number if your company has a special part number system with Digi-Key  # noqa: E501

        :param customer_part_number: The customer_part_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._customer_part_number = customer_part_number

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this LineItem.  # noqa: E501

        Digi-Key part number. Either this or ManufacturerPartNumber must be provided.  # noqa: E501

        :return: The digi_key_part_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this LineItem.

        Digi-Key part number. Either this or ManufacturerPartNumber must be provided.  # noqa: E501

        :param digi_key_part_number: The digi_key_part_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this LineItem.  # noqa: E501

        Manufacturer part number. Either this or Digi-Key part number must be provided.  # noqa: E501

        :return: The manufacturer_part_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this LineItem.

        Manufacturer part number. Either this or Digi-Key part number must be provided.  # noqa: E501

        :param manufacturer_part_number: The manufacturer_part_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def manufacturer_name(self):
        """Gets the manufacturer_name of this LineItem.  # noqa: E501

        Optional name of manufacturer/part supplier. May assist with unresolved manufacturer part numbers.  # noqa: E501

        :return: The manufacturer_name of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """Sets the manufacturer_name of this LineItem.

        Optional name of manufacturer/part supplier. May assist with unresolved manufacturer part numbers.  # noqa: E501

        :param manufacturer_name: The manufacturer_name of this LineItem.  # noqa: E501
        :type: str
        """

        self._manufacturer_name = manufacturer_name

    @property
    def requested_quantity(self):
        """Gets the requested_quantity of this LineItem.  # noqa: E501

        Quantity that must be greater than zero.  # noqa: E501

        :return: The requested_quantity of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._requested_quantity

    @requested_quantity.setter
    def requested_quantity(self, requested_quantity):
        """Sets the requested_quantity of this LineItem.

        Quantity that must be greater than zero.  # noqa: E501

        :param requested_quantity: The requested_quantity of this LineItem.  # noqa: E501
        :type: int
        """

        self._requested_quantity = requested_quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this LineItem.  # noqa: E501

        Expected price. This is required so any discrepancies between between the expected and actual price can be addressed.  # noqa: E501

        :return: The unit_price of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this LineItem.

        Expected price. This is required so any discrepancies between between the expected and actual price can be addressed.  # noqa: E501

        :param unit_price: The unit_price of this LineItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def quote_id(self):
        """Gets the quote_id of this LineItem.  # noqa: E501

        Optional QuoteId to use price from.  # noqa: E501

        :return: The quote_id of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this LineItem.

        Optional QuoteId to use price from.  # noqa: E501

        :param quote_id: The quote_id of this LineItem.  # noqa: E501
        :type: int
        """

        self._quote_id = quote_id

    @property
    def delivery_date(self):
        """Gets the delivery_date of this LineItem.  # noqa: E501

        Optional future date that the product is expected to be in-house. This should be in ISO 8601 format.  # noqa: E501

        :return: The delivery_date of this LineItem.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this LineItem.

        Optional future date that the product is expected to be in-house. This should be in ISO 8601 format.  # noqa: E501

        :param delivery_date: The delivery_date of this LineItem.  # noqa: E501
        :type: datetime
        """

        self._delivery_date = delivery_date

    @property
    def line_item_notes(self):
        """Gets the line_item_notes of this LineItem.  # noqa: E501

        Optional notes  # noqa: E501

        :return: The line_item_notes of this LineItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._line_item_notes

    @line_item_notes.setter
    def line_item_notes(self, line_item_notes):
        """Sets the line_item_notes of this LineItem.

        Optional notes  # noqa: E501

        :param line_item_notes: The line_item_notes of this LineItem.  # noqa: E501
        :type: list[str]
        """

        self._line_item_notes = line_item_notes

    @property
    def schedules(self):
        """Gets the schedules of this LineItem.  # noqa: E501

        Optional array of Schedules for shipping this LineItem. If blank, will use LineItem's delivery date with the full quantity.  # noqa: E501

        :return: The schedules of this LineItem.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this LineItem.

        Optional array of Schedules for shipping this LineItem. If blank, will use LineItem's delivery date with the full quantity.  # noqa: E501

        :param schedules: The schedules of this LineItem.  # noqa: E501
        :type: list[Schedule]
        """

        self._schedules = schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
