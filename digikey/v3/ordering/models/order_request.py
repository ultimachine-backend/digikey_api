# coding: utf-8

"""
    Ordering Api

    Queues an order for processing.  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'purchase_order_number': 'str',
        'currency': 'str',
        'ship_control': 'str',
        'buyer_contact': 'Contact',
        'shipping_contact': 'Contact',
        'billing_account': 'int',
        'ship_method': 'str',
        'shipper_account_number': 'str',
        'line_items': 'list[LineItem]',
        'order_notes': 'list[str]',
        'packaging_preference': 'str',
        'taxable': 'bool',
        'export_questions': 'ExportQuestions'
    }

    attribute_map = {
        'purchase_order_number': 'PurchaseOrderNumber',
        'currency': 'Currency',
        'ship_control': 'ShipControl',
        'buyer_contact': 'BuyerContact',
        'shipping_contact': 'ShippingContact',
        'billing_account': 'BillingAccount',
        'ship_method': 'ShipMethod',
        'shipper_account_number': 'ShipperAccountNumber',
        'line_items': 'LineItems',
        'order_notes': 'OrderNotes',
        'packaging_preference': 'PackagingPreference',
        'taxable': 'Taxable',
        'export_questions': 'ExportQuestions'
    }

    def __init__(self, purchase_order_number=None, currency=None, ship_control=None, buyer_contact=None, shipping_contact=None, billing_account=None, ship_method=None, shipper_account_number=None, line_items=None, order_notes=None, packaging_preference=None, taxable=None, export_questions=None):  # noqa: E501
        """OrderRequest - a model defined in Swagger"""  # noqa: E501

        self._purchase_order_number = None
        self._currency = None
        self._ship_control = None
        self._buyer_contact = None
        self._shipping_contact = None
        self._billing_account = None
        self._ship_method = None
        self._shipper_account_number = None
        self._line_items = None
        self._order_notes = None
        self._packaging_preference = None
        self._taxable = None
        self._export_questions = None
        self.discriminator = None

        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if currency is not None:
            self.currency = currency
        if ship_control is not None:
            self.ship_control = ship_control
        if buyer_contact is not None:
            self.buyer_contact = buyer_contact
        if shipping_contact is not None:
            self.shipping_contact = shipping_contact
        if billing_account is not None:
            self.billing_account = billing_account
        if ship_method is not None:
            self.ship_method = ship_method
        if shipper_account_number is not None:
            self.shipper_account_number = shipper_account_number
        if line_items is not None:
            self.line_items = line_items
        if order_notes is not None:
            self.order_notes = order_notes
        if packaging_preference is not None:
            self.packaging_preference = packaging_preference
        if taxable is not None:
            self.taxable = taxable
        if export_questions is not None:
            self.export_questions = export_questions

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this OrderRequest.  # noqa: E501

        Purchase order number  # noqa: E501

        :return: The purchase_order_number of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this OrderRequest.

        Purchase order number  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def currency(self):
        """Gets the currency of this OrderRequest.  # noqa: E501

        Currency to use for the order  # noqa: E501

        :return: The currency of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderRequest.

        Currency to use for the order  # noqa: E501

        :param currency: The currency of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def ship_control(self):
        """Gets the ship_control of this OrderRequest.  # noqa: E501

        If some products are not in stock, how would you like this order realsed?  Immediate-Ship in stock products immediatley and each backorder as soon as it's available - Default Options  Single-No products from the Salesorder will ship until all items are available  # noqa: E501

        :return: The ship_control of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ship_control

    @ship_control.setter
    def ship_control(self, ship_control):
        """Sets the ship_control of this OrderRequest.

        If some products are not in stock, how would you like this order realsed?  Immediate-Ship in stock products immediatley and each backorder as soon as it's available - Default Options  Single-No products from the Salesorder will ship until all items are available  # noqa: E501

        :param ship_control: The ship_control of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._ship_control = ship_control

    @property
    def buyer_contact(self):
        """Gets the buyer_contact of this OrderRequest.  # noqa: E501


        :return: The buyer_contact of this OrderRequest.  # noqa: E501
        :rtype: Contact
        """
        return self._buyer_contact

    @buyer_contact.setter
    def buyer_contact(self, buyer_contact):
        """Sets the buyer_contact of this OrderRequest.


        :param buyer_contact: The buyer_contact of this OrderRequest.  # noqa: E501
        :type: Contact
        """

        self._buyer_contact = buyer_contact

    @property
    def shipping_contact(self):
        """Gets the shipping_contact of this OrderRequest.  # noqa: E501


        :return: The shipping_contact of this OrderRequest.  # noqa: E501
        :rtype: Contact
        """
        return self._shipping_contact

    @shipping_contact.setter
    def shipping_contact(self, shipping_contact):
        """Sets the shipping_contact of this OrderRequest.


        :param shipping_contact: The shipping_contact of this OrderRequest.  # noqa: E501
        :type: Contact
        """

        self._shipping_contact = shipping_contact

    @property
    def billing_account(self):
        """Gets the billing_account of this OrderRequest.  # noqa: E501

        Your Net Terms Billing account number  # noqa: E501

        :return: The billing_account of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this OrderRequest.

        Your Net Terms Billing account number  # noqa: E501

        :param billing_account: The billing_account of this OrderRequest.  # noqa: E501
        :type: int
        """

        self._billing_account = billing_account

    @property
    def ship_method(self):
        """Gets the ship_method of this OrderRequest.  # noqa: E501

        Shipping method. Not all options are available in all times and locations. The following options are accepted: \"DHL worldwide Express\"  \"FedEx ground\"  \"FedEx 3 day\"  \"FedEx 2 day\"  \"FedEx standard overnight\"  \"FedEx priority overnight\"  \"FedEx first overnight\"  \"FedEx international priority\"  \"FedEx international economy\"  \"UPS ground\"  \"UPS 3 day\"  \"UPS 2 day\"  \"UPS 2 day noon\"  \"UPS 1 day\"  \"UPS 1 day 3 p.m.\"  \"UPS 1 day early a.m.\"  \"UPS worldwide expedited\"  \"UPS worldwide express\"  \"UPS worldwide saver\"  \"USPS express mail international\"  \"USPS express mail\"  \"USPS priority mail\"  \"USPS first class mail\"  \"USPS standard mail\"  # noqa: E501

        :return: The ship_method of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ship_method

    @ship_method.setter
    def ship_method(self, ship_method):
        """Sets the ship_method of this OrderRequest.

        Shipping method. Not all options are available in all times and locations. The following options are accepted: \"DHL worldwide Express\"  \"FedEx ground\"  \"FedEx 3 day\"  \"FedEx 2 day\"  \"FedEx standard overnight\"  \"FedEx priority overnight\"  \"FedEx first overnight\"  \"FedEx international priority\"  \"FedEx international economy\"  \"UPS ground\"  \"UPS 3 day\"  \"UPS 2 day\"  \"UPS 2 day noon\"  \"UPS 1 day\"  \"UPS 1 day 3 p.m.\"  \"UPS 1 day early a.m.\"  \"UPS worldwide expedited\"  \"UPS worldwide express\"  \"UPS worldwide saver\"  \"USPS express mail international\"  \"USPS express mail\"  \"USPS priority mail\"  \"USPS first class mail\"  \"USPS standard mail\"  # noqa: E501

        :param ship_method: The ship_method of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._ship_method = ship_method

    @property
    def shipper_account_number(self):
        """Gets the shipper_account_number of this OrderRequest.  # noqa: E501

        Optional shipping account to use  # noqa: E501

        :return: The shipper_account_number of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipper_account_number

    @shipper_account_number.setter
    def shipper_account_number(self, shipper_account_number):
        """Sets the shipper_account_number of this OrderRequest.

        Optional shipping account to use  # noqa: E501

        :param shipper_account_number: The shipper_account_number of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._shipper_account_number = shipper_account_number

    @property
    def line_items(self):
        """Gets the line_items of this OrderRequest.  # noqa: E501

        List of one of more Part Details  # noqa: E501

        :return: The line_items of this OrderRequest.  # noqa: E501
        :rtype: list[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this OrderRequest.

        List of one of more Part Details  # noqa: E501

        :param line_items: The line_items of this OrderRequest.  # noqa: E501
        :type: list[LineItem]
        """

        self._line_items = line_items

    @property
    def order_notes(self):
        """Gets the order_notes of this OrderRequest.  # noqa: E501

        Optional notes  # noqa: E501

        :return: The order_notes of this OrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_notes

    @order_notes.setter
    def order_notes(self, order_notes):
        """Sets the order_notes of this OrderRequest.

        Optional notes  # noqa: E501

        :param order_notes: The order_notes of this OrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._order_notes = order_notes

    @property
    def packaging_preference(self):
        """Gets the packaging_preference of this OrderRequest.  # noqa: E501

        Optional field for which type of part to prefer: DKR (Digi-Key Reel) or CT (cut tape)  # noqa: E501

        :return: The packaging_preference of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._packaging_preference

    @packaging_preference.setter
    def packaging_preference(self, packaging_preference):
        """Sets the packaging_preference of this OrderRequest.

        Optional field for which type of part to prefer: DKR (Digi-Key Reel) or CT (cut tape)  # noqa: E501

        :param packaging_preference: The packaging_preference of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._packaging_preference = packaging_preference

    @property
    def taxable(self):
        """Gets the taxable of this OrderRequest.  # noqa: E501

        Whether the order is taxable or not  # noqa: E501

        :return: The taxable of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this OrderRequest.

        Whether the order is taxable or not  # noqa: E501

        :param taxable: The taxable of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    @property
    def export_questions(self):
        """Gets the export_questions of this OrderRequest.  # noqa: E501


        :return: The export_questions of this OrderRequest.  # noqa: E501
        :rtype: ExportQuestions
        """
        return self._export_questions

    @export_questions.setter
    def export_questions(self, export_questions):
        """Sets the export_questions of this OrderRequest.


        :param export_questions: The export_questions of this OrderRequest.  # noqa: E501
        :type: ExportQuestions
        """

        self._export_questions = export_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
