# coding: utf-8

"""
    Ordering Api

    Queues an order for processing.  # noqa: E501

    OpenAPI spec version: v3
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExportQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'consignee_name': 'str',
        'primary_application': 'str',
        'secondary_application': 'str',
        'additional_info': 'str'
    }

    attribute_map = {
        'country_code': 'CountryCode',
        'consignee_name': 'ConsigneeName',
        'primary_application': 'PrimaryApplication',
        'secondary_application': 'SecondaryApplication',
        'additional_info': 'AdditionalInfo'
    }

    def __init__(self, country_code=None, consignee_name=None, primary_application=None, secondary_application=None, additional_info=None):  # noqa: E501
        """ExportQuestions - a model defined in Swagger"""  # noqa: E501

        self._country_code = None
        self._consignee_name = None
        self._primary_application = None
        self._secondary_application = None
        self._additional_info = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if consignee_name is not None:
            self.consignee_name = consignee_name
        if primary_application is not None:
            self.primary_application = primary_application
        if secondary_application is not None:
            self.secondary_application = secondary_application
        if additional_info is not None:
            self.additional_info = additional_info

    @property
    def country_code(self):
        """Gets the country_code of this ExportQuestions.  # noqa: E501

        The 2 digit ISO code for the country of final destination  # noqa: E501

        :return: The country_code of this ExportQuestions.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ExportQuestions.

        The 2 digit ISO code for the country of final destination  # noqa: E501

        :param country_code: The country_code of this ExportQuestions.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def consignee_name(self):
        """Gets the consignee_name of this ExportQuestions.  # noqa: E501

        End customer name  # noqa: E501

        :return: The consignee_name of this ExportQuestions.  # noqa: E501
        :rtype: str
        """
        return self._consignee_name

    @consignee_name.setter
    def consignee_name(self, consignee_name):
        """Sets the consignee_name of this ExportQuestions.

        End customer name  # noqa: E501

        :param consignee_name: The consignee_name of this ExportQuestions.  # noqa: E501
        :type: str
        """

        self._consignee_name = consignee_name

    @property
    def primary_application(self):
        """Gets the primary_application of this ExportQuestions.  # noqa: E501

        The category of use for the product. Must exactly match one of the following items: \"Aerospace\", \"Automotive\", \"Computer & Peripherals\", \"Consumer Electronics\", \"Industrial\", \"Medical\", \"Military\".  # noqa: E501

        :return: The primary_application of this ExportQuestions.  # noqa: E501
        :rtype: str
        """
        return self._primary_application

    @primary_application.setter
    def primary_application(self, primary_application):
        """Sets the primary_application of this ExportQuestions.

        The category of use for the product. Must exactly match one of the following items: \"Aerospace\", \"Automotive\", \"Computer & Peripherals\", \"Consumer Electronics\", \"Industrial\", \"Medical\", \"Military\".  # noqa: E501

        :param primary_application: The primary_application of this ExportQuestions.  # noqa: E501
        :type: str
        """

        self._primary_application = primary_application

    @property
    def secondary_application(self):
        """Gets the secondary_application of this ExportQuestions.  # noqa: E501

        The use for the product, valid options are determined by PrimaryApplication. It must match one of the following items exactly.   If Primary is \"Aerospace\", valid options are: \"Aircraft, commercial transport\", \"Aircraft, UAV\", \"Communications equipment\", \"Computer systems\", \"Entertainment systems\", \"Sensors, controls, test equipment\", \"Safety systems\", \"Satellites, commercial\", \"Other\".  If Primary is \"Automotive\", valid options are: \"Drive train\", \"Instrumentation\", \"Safety systems\", \"Other\".  If Primary is \"Computer & Peripherals\", valid options are: \"Accessories\", \"Desktop\", \"Laptop\", \"Server/storage\", \"Other\".  If Primary is \"Consumer Electronics\", valid options are: \"Audio/video\", \"Gaming systems\", \"Home appliances\", \"Lighting systems\", \"Wired communications\", \"Wireless communications\", \"Other\".  If Primary is \"Industrial\", valid options are: \"Appliances/white goods\", \"Automation and control\", \"Renewable/fossil fuels energy\", \"Nuclear energy\", \"Lighting systems\", \"Sensors, controls, test equipment\", \"Tools\", \"Other\".  If Primary is \"Medical\", valid options are: \"Diagnostic equipment\", \"Instruments, devices\", \"Imaging / scanning\", \"Other\".  If Primary is \"Military\", valid options are: \"Aircraft, military\", \"Aircraft, UAV\", \"Communications equipment\", \"Computer systems\", \"Missile systems\", \"Satellites, military\", \"Sensors, controls, test equipment\", \"Vehicles, personnel transport\", \"Vehicles, weapon transport\", \"Weapons systems\", \"Other\".  # noqa: E501

        :return: The secondary_application of this ExportQuestions.  # noqa: E501
        :rtype: str
        """
        return self._secondary_application

    @secondary_application.setter
    def secondary_application(self, secondary_application):
        """Sets the secondary_application of this ExportQuestions.

        The use for the product, valid options are determined by PrimaryApplication. It must match one of the following items exactly.   If Primary is \"Aerospace\", valid options are: \"Aircraft, commercial transport\", \"Aircraft, UAV\", \"Communications equipment\", \"Computer systems\", \"Entertainment systems\", \"Sensors, controls, test equipment\", \"Safety systems\", \"Satellites, commercial\", \"Other\".  If Primary is \"Automotive\", valid options are: \"Drive train\", \"Instrumentation\", \"Safety systems\", \"Other\".  If Primary is \"Computer & Peripherals\", valid options are: \"Accessories\", \"Desktop\", \"Laptop\", \"Server/storage\", \"Other\".  If Primary is \"Consumer Electronics\", valid options are: \"Audio/video\", \"Gaming systems\", \"Home appliances\", \"Lighting systems\", \"Wired communications\", \"Wireless communications\", \"Other\".  If Primary is \"Industrial\", valid options are: \"Appliances/white goods\", \"Automation and control\", \"Renewable/fossil fuels energy\", \"Nuclear energy\", \"Lighting systems\", \"Sensors, controls, test equipment\", \"Tools\", \"Other\".  If Primary is \"Medical\", valid options are: \"Diagnostic equipment\", \"Instruments, devices\", \"Imaging / scanning\", \"Other\".  If Primary is \"Military\", valid options are: \"Aircraft, military\", \"Aircraft, UAV\", \"Communications equipment\", \"Computer systems\", \"Missile systems\", \"Satellites, military\", \"Sensors, controls, test equipment\", \"Vehicles, personnel transport\", \"Vehicles, weapon transport\", \"Weapons systems\", \"Other\".  # noqa: E501

        :param secondary_application: The secondary_application of this ExportQuestions.  # noqa: E501
        :type: str
        """

        self._secondary_application = secondary_application

    @property
    def additional_info(self):
        """Gets the additional_info of this ExportQuestions.  # noqa: E501

        Free form text to provide any additional application information  # noqa: E501

        :return: The additional_info of this ExportQuestions.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this ExportQuestions.

        Free form text to provide any additional application information  # noqa: E501

        :param additional_info: The additional_info of this ExportQuestions.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
