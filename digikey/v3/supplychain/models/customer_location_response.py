# coding: utf-8

"""
    Supply Chain Api

    Provides ReST API operations for interacting with the Digi-Key Supply Chain services.  # noqa: E501

    OpenAPI spec version: v1
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerLocationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'bonded_inventory': 'bool',
        'currency': 'str',
        'shipping_address': 'object'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'bonded_inventory': 'bondedInventory',
        'currency': 'currency',
        'shipping_address': 'shippingAddress'
    }

    def __init__(self, customer_id=None, bonded_inventory=None, currency=None, shipping_address=None):  # noqa: E501
        """CustomerLocationResponse - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._bonded_inventory = None
        self._currency = None
        self._shipping_address = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if bonded_inventory is not None:
            self.bonded_inventory = bonded_inventory
        if currency is not None:
            self.currency = currency
        if shipping_address is not None:
            self.shipping_address = shipping_address

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerLocationResponse.  # noqa: E501

        The Id assigned to the location and customer  # noqa: E501

        :return: The customer_id of this CustomerLocationResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerLocationResponse.

        The Id assigned to the location and customer  # noqa: E501

        :param customer_id: The customer_id of this CustomerLocationResponse.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def bonded_inventory(self):
        """Gets the bonded_inventory of this CustomerLocationResponse.  # noqa: E501

        Does the location have bonded Inventory  # noqa: E501

        :return: The bonded_inventory of this CustomerLocationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._bonded_inventory

    @bonded_inventory.setter
    def bonded_inventory(self, bonded_inventory):
        """Sets the bonded_inventory of this CustomerLocationResponse.

        Does the location have bonded Inventory  # noqa: E501

        :param bonded_inventory: The bonded_inventory of this CustomerLocationResponse.  # noqa: E501
        :type: bool
        """

        self._bonded_inventory = bonded_inventory

    @property
    def currency(self):
        """Gets the currency of this CustomerLocationResponse.  # noqa: E501

        ISO code for currency used in the order.  # noqa: E501

        :return: The currency of this CustomerLocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerLocationResponse.

        ISO code for currency used in the order.  # noqa: E501

        :param currency: The currency of this CustomerLocationResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def shipping_address(self):
        """Gets the shipping_address of this CustomerLocationResponse.  # noqa: E501

        Address for the shipping destination  # noqa: E501

        :return: The shipping_address of this CustomerLocationResponse.  # noqa: E501
        :rtype: object
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this CustomerLocationResponse.

        Address for the shipping destination  # noqa: E501

        :param shipping_address: The shipping_address of this CustomerLocationResponse.  # noqa: E501
        :type: object
        """

        self._shipping_address = shipping_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerLocationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerLocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
