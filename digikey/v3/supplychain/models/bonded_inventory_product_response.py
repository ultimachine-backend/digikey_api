# coding: utf-8

"""
    Supply Chain Api

    Provides ReST API operations for interacting with the Digi-Key Supply Chain services.  # noqa: E501

    OpenAPI spec version: v1
    Contact: api.support@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BondedInventoryProductResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'customer_part_number': 'str',
        'product_description': 'str',
        'manufacturer': 'str',
        'unit_price': 'float',
        'pack_type': 'str',
        'country_of_origin': 'str',
        'reserve_quantity': 'int',
        'back_order_reserve_quantity': 'int',
        'vendor_lead_weeks': 'str',
        'customer_id': 'int'
    }

    attribute_map = {
        'digi_key_part_number': 'digiKeyPartNumber',
        'manufacturer_part_number': 'manufacturerPartNumber',
        'customer_part_number': 'customerPartNumber',
        'product_description': 'productDescription',
        'manufacturer': 'manufacturer',
        'unit_price': 'unitPrice',
        'pack_type': 'packType',
        'country_of_origin': 'countryOfOrigin',
        'reserve_quantity': 'reserveQuantity',
        'back_order_reserve_quantity': 'backOrderReserveQuantity',
        'vendor_lead_weeks': 'vendorLeadWeeks',
        'customer_id': 'customerId'
    }

    def __init__(self, digi_key_part_number=None, manufacturer_part_number=None, customer_part_number=None, product_description=None, manufacturer=None, unit_price=None, pack_type=None, country_of_origin=None, reserve_quantity=None, back_order_reserve_quantity=None, vendor_lead_weeks=None, customer_id=None):  # noqa: E501
        """BondedInventoryProductResponse - a model defined in Swagger"""  # noqa: E501

        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._customer_part_number = None
        self._product_description = None
        self._manufacturer = None
        self._unit_price = None
        self._pack_type = None
        self._country_of_origin = None
        self._reserve_quantity = None
        self._back_order_reserve_quantity = None
        self._vendor_lead_weeks = None
        self._customer_id = None
        self.discriminator = None

        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if customer_part_number is not None:
            self.customer_part_number = customer_part_number
        if product_description is not None:
            self.product_description = product_description
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if unit_price is not None:
            self.unit_price = unit_price
        if pack_type is not None:
            self.pack_type = pack_type
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if reserve_quantity is not None:
            self.reserve_quantity = reserve_quantity
        if back_order_reserve_quantity is not None:
            self.back_order_reserve_quantity = back_order_reserve_quantity
        if vendor_lead_weeks is not None:
            self.vendor_lead_weeks = vendor_lead_weeks
        if customer_id is not None:
            self.customer_id = customer_id

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this BondedInventoryProductResponse.  # noqa: E501

        The Digi-Key part number.  # noqa: E501

        :return: The digi_key_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this BondedInventoryProductResponse.

        The Digi-Key part number.  # noqa: E501

        :param digi_key_part_number: The digi_key_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this BondedInventoryProductResponse.  # noqa: E501

        The Manufacturer Part Number.  # noqa: E501

        :return: The manufacturer_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this BondedInventoryProductResponse.

        The Manufacturer Part Number.  # noqa: E501

        :param manufacturer_part_number: The manufacturer_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def customer_part_number(self):
        """Gets the customer_part_number of this BondedInventoryProductResponse.  # noqa: E501

        The Customer Part Number.  # noqa: E501

        :return: The customer_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_part_number

    @customer_part_number.setter
    def customer_part_number(self, customer_part_number):
        """Sets the customer_part_number of this BondedInventoryProductResponse.

        The Customer Part Number.  # noqa: E501

        :param customer_part_number: The customer_part_number of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._customer_part_number = customer_part_number

    @property
    def product_description(self):
        """Gets the product_description of this BondedInventoryProductResponse.  # noqa: E501

        Catalog description of the product.  # noqa: E501

        :return: The product_description of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this BondedInventoryProductResponse.

        Catalog description of the product.  # noqa: E501

        :param product_description: The product_description of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def manufacturer(self):
        """Gets the manufacturer of this BondedInventoryProductResponse.  # noqa: E501

        The Manufacturer of the product.  # noqa: E501

        :return: The manufacturer of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this BondedInventoryProductResponse.

        The Manufacturer of the product.  # noqa: E501

        :param manufacturer: The manufacturer of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def unit_price(self):
        """Gets the unit_price of this BondedInventoryProductResponse.  # noqa: E501

        The price for a single unit of this product.  # noqa: E501

        :return: The unit_price of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this BondedInventoryProductResponse.

        The price for a single unit of this product.  # noqa: E501

        :param unit_price: The unit_price of this BondedInventoryProductResponse.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def pack_type(self):
        """Gets the pack_type of this BondedInventoryProductResponse.  # noqa: E501

        The Package Type of the product  # noqa: E501

        :return: The pack_type of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._pack_type

    @pack_type.setter
    def pack_type(self, pack_type):
        """Sets the pack_type of this BondedInventoryProductResponse.

        The Package Type of the product  # noqa: E501

        :param pack_type: The pack_type of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._pack_type = pack_type

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this BondedInventoryProductResponse.  # noqa: E501

        The Country Of Origin of the product  # noqa: E501

        :return: The country_of_origin of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this BondedInventoryProductResponse.

        The Country Of Origin of the product  # noqa: E501

        :param country_of_origin: The country_of_origin of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def reserve_quantity(self):
        """Gets the reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501

        The Reserve Quantity on backorder  # noqa: E501

        :return: The reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: int
        """
        return self._reserve_quantity

    @reserve_quantity.setter
    def reserve_quantity(self, reserve_quantity):
        """Sets the reserve_quantity of this BondedInventoryProductResponse.

        The Reserve Quantity on backorder  # noqa: E501

        :param reserve_quantity: The reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501
        :type: int
        """

        self._reserve_quantity = reserve_quantity

    @property
    def back_order_reserve_quantity(self):
        """Gets the back_order_reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501

        The Reserve Quantity on backorder  # noqa: E501

        :return: The back_order_reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: int
        """
        return self._back_order_reserve_quantity

    @back_order_reserve_quantity.setter
    def back_order_reserve_quantity(self, back_order_reserve_quantity):
        """Sets the back_order_reserve_quantity of this BondedInventoryProductResponse.

        The Reserve Quantity on backorder  # noqa: E501

        :param back_order_reserve_quantity: The back_order_reserve_quantity of this BondedInventoryProductResponse.  # noqa: E501
        :type: int
        """

        self._back_order_reserve_quantity = back_order_reserve_quantity

    @property
    def vendor_lead_weeks(self):
        """Gets the vendor_lead_weeks of this BondedInventoryProductResponse.  # noqa: E501

        The number of weeks lead time  # noqa: E501

        :return: The vendor_lead_weeks of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._vendor_lead_weeks

    @vendor_lead_weeks.setter
    def vendor_lead_weeks(self, vendor_lead_weeks):
        """Sets the vendor_lead_weeks of this BondedInventoryProductResponse.

        The number of weeks lead time  # noqa: E501

        :param vendor_lead_weeks: The vendor_lead_weeks of this BondedInventoryProductResponse.  # noqa: E501
        :type: str
        """

        self._vendor_lead_weeks = vendor_lead_weeks

    @property
    def customer_id(self):
        """Gets the customer_id of this BondedInventoryProductResponse.  # noqa: E501

        The Customer Id that the bonded quantity is assigned to  # noqa: E501

        :return: The customer_id of this BondedInventoryProductResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this BondedInventoryProductResponse.

        The Customer Id that the bonded quantity is assigned to  # noqa: E501

        :param customer_id: The customer_id of this BondedInventoryProductResponse.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BondedInventoryProductResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BondedInventoryProductResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
